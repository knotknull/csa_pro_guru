
###################################################################################################
##
##  AWS Certified Solutions Architect Professional
##  https://learn.acloud.guru/course/aws-certified-solutions-architect-professional-2019/dashboard
##
###################################################################################################


## Intro

Followup by taking AWS Certification Preparation Guide

###################################################################################################
## Data Stores
###################################################################################################


## Concepts
#############


## Persistent Datastore
Data is durable after reboots, restarts, powercycles
	- Glacier
	- RDS

## Transient Datastore
Data is temporarily stored and passed along to another process / persistent store
	- SQS
	- SNS

## Ephemeral Datastore
Data is lost when stopped
	- EC2
	- Memcached

## IOPS vs Throughput

Input/Output Operations per Second (IOPS)
  Measure how fast we can read and write to a device

Throughput
  How much data can be moved at a time



## Consistency Models: ACID & BASE
Atomic		All or nothing
Consistent	Must be valid
Isolated	Transactions can't interfere
Durable		Completed transaction stays around

Basic Availability	values availability even if state
Soft-state		might not be instantly consistent across stores
Eventually Consistent	will achieve consistency at some point


## S3
#############

S3 is an Object Store
 - used in other AWS services

  ** Maximum object size is 5TB
  ** Largest object in a single PUT is 5GB
  NOTE: Use multi-part uploads if larger than 100MB

s3://bucket/finance/april/invoice_1234.pdf = a Key, NOT A FILEPATH

## S3 Consistency

Documentation																Real world
--------------------------- 								--------------------------------
S3 provides read-after-write 								Write it and read it immediately
consistency for PUTS of new objects

HEAD or GET requests of the key before      Respond with "never seen it" until
an object exists will result in eventual    I completely write new object and
consistency																	fully replicate it.

S3 offers eventual consistency for 					Update or delete completely locally,
overwrite PUTS and DELETES									then replicate elsewhere. Until then
																						serve up the current file

Updates to a single key are atomic					Only one person can update this object,
 																						if two requests, process in order of
																						timestamp.  Updates seen as soon as
																						replication is done elsewhere.



## S3 Security

	- Resource-based (Object ACL, Bucket policy)
	- User-based  (IAM Policies)
	- Optional Multi-factor Authentication before delete

	----------------------------
  |  Is your user account    |---------  NO
  |  allowed to access me?   |
	----------------------------
            |
            | yes
	----------------------------
  |  Does the bucket policy  |---------  NO
  |  allow access to you     |
	----------------------------
            |
            | yes
	----------------------------
  |  Does the object ACL      |---------  NO
  |  allow you access to it   |
	----------------------------
            |
            | yes
		-------------------
    |    Access it    |
		-------------------


## S3 Versioning
	- New version with each write
	- Enables "roll-back" and "un-delete" capabilities
	- Old versions count as billable size until they are permanently deleted
	- Integrated w/ Lifecycle Management

## S3 Data Protection
	- Optionally require Multi-factor Authentication:
		- Safeguard against accidental deletion of an object
		- Change the versioning state of your bucket

	- Cross region replication
		- Security
		- Compliance
		- Latency

## S3 Lifecycle Management
		- Optimize storage costs
		- Adhere to data retention policies
		- keep S3 volumes well-maintained

## S3 Analytics

Data Lake Concepts									Athena, Redshift Spectrum, QuickSight
IoT Streaming Data Repo							Kinesis Firehose
Machine Learning & AI storage				Rekognition, Lex, MXNet
Storage Class Analysis 							S3 Management Analytics


## S3 Encryption at Rest

	Encryption Optional								Meaning
 ---------------------							--------------------
 SS3-S3															Use S3's existing encryption key for AES-256
 SS3-C															Upload your own AES-256 encryption key which
 																		S3 will use when it writes the objects.
 SS3-KMS														Use a key generated and managed by AWS Key
 																		Management Service
 Client-Side 												Encrypt objects using your own local encryption
                                    process before uploading to S3 (PGP, GPG, etc.)


## S3 Tricks

Transfer Accelerations						Speed up data uploads using CloudFront in reverse

Requestor Pays 										The requestor rather than the bucket owner
																	pays for requests and data transfer.

Tags 															Assign tags to objects for use in costing,
                                  billing, security, etc.

Events 														Trigger notifications to SNS, SQS or Lambda
																	when certain events happen in your bucket

Static Web Hosting 								Simple and massively scalable static website hosting

BitTorrent 												Use the BitTorrent protocol to retrieve any
																	publicly available object by automatically
																	generating a .torrent file.


## Glacier
#############

	- Cheap, slow to respond, seldom accessed
	- "Cold Storage"
	- Used by AWS Storage Gateway Virtual Tape Library
	- Integrated with AWS s3 via Lifecycle Management
	- Faster retrieval speed options if you pay more



                               +---------+  - File, zip, tar, etc
          +-------------+      | Archive |  - Max size 40TB
          |             |      +---------+  - Immutable
          |             | <---------+
[IAM]     |   Glacier   |
  access  |   Vault     |       +--------+
  +-----> |             |       |        |  - Different than vault access policy
          +-------------+       | Glacier|  - Enforce rules like no deletes or MFA
                  ^             | Vault  |  - Immutable
                  |             | Lock   |
                  |             +--------+
                  +---------------+
                      Policy


  Glacier Vault like S3 bucket
  Glacier Archive like an S3 object
	Policy: rules for that Glacier Vault (no delete or use MFA)
	Access done via IAM


	Create a Glacier Vault Lock then Initiate a vault lock
				- 24 hours to confirm vault lock
				- After 24 hours and is not confirmed: vault lock aborted
				- Complete vault lock within 24 hours: applies vault lock permanently



## Elastic Block Storage
##########################

	- "virtual hard drives"
	- Can only be used with EC2
	- Tied to a single AZ
	- Variety of Optimized choices for IOPS, throughtput and cost
	- Snapshots!!

	Instance Store vs. EBS:
			- Instance Store is temporary, only available when EC2 is running
			- ideal for caches, buffers, work areas
			- data goes away when EC2 is stopped or terminated
			- locked to that EC2
			- EBS not locked to EC2
			- EBS can create snapshot
			- Instance store is "attached"
			- EBS over network

EBS Snapshots
	- cost-effective and easy backup
	- share data sets with other users or accounts
					- share the snapshot and user can create a volume from it
	- Migrate a system to a new AZ or Region
			REMEMBER: EBS tied to a single AZ, snapshots allow you to migrate
	- convert unencrypted volume to an encrypted volume
					- create EBS from volume and check encrypt check box



	First snapshot stores the entire block store
	Subsequent snapshots store just the delta (but also contain the base)
	If you delete 1st snapshot and

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     |   | 1 | O |   |   |	 	== Snapshot 1
     |---|---|---|---|---|
     |   | 0 | 1 |   |   |
     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|

add two pieces of in and Snapshot 2 looks like this

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 1 |   |   |   |   |	 	== Snapshot 2
     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 0 |   |   |   |   |
     |---|---|---|---|---|

restoring from snapshot 2 will give you

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 1 | 1 | 0 |   |   |	 	== Restored Snapshot 2
     |---|---|---|---|---|
     |   | 0 | 1 |   |   |
     |---|---|---|---|---|
     | 0 |   |   |   |   |
     |---|---|---|---|---|

add 1 piece and delete 1 piece of data Snapshot 3 looks like this

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     |   |   |   |   |   |	 	== Snapshot 3
     |---|---|---|---|---|
     |   |   |   | 1 |   |
     |---|---|---|---|---|
     | X |   |   |   |   |
     |---|---|---|---|---|

restoring from snapshot 3 will give you

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 1 | 1 | 0 |   |   |	 	== Restored Snapshot 3
     |---|---|---|---|---|
     |   | 0 | 1 | 1 |   |
     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|

REMEMBER:
	- FIRST snapshot gets charged for the full EBS size
	- All other snapshots after 1st get charged for JUST THE DELTA of storage
	- If delete intermediate snapshots you can restore a later snapshot
	- If delete FIRST snapshot, can restore later snapshots

THINK Snapshots as collection of pointers to data.
		- Pointers pulled forward to next most recent snap


## Elastic File Service
##########################

	- implementation of NFS file share
	- elastic storage capacity, and pay for only what you use (unlike EBS)
	- EFS 3x expensive as EBS,  20x expensive as S3
	- Multi-AZ metadata and data storage
	- Configure mount-points in one or many AZs
			- EC2 can mount local to their AZ
	- Can be mounted from on-premises systems ONLY if using Direct Connect
	- Alternatively, use EFS File Sync agent
				- load on premise and syncronize to EFS

	- EFS supports MOST features of NFS V4 BUT NOT ALL


+---------------------------------------------------+
| AWS                                               |
| +--------------------------------+                |
| |                      US-East-1 |                |
| | +-----+                        |                |
| | | web +-----------+            |                |
| | +-----+           |            |                |
| |                   vMount Point]|    +------+    |
| | +-----+            ^      +    |    |      |    |
| | | web +------------+      +-------->+ EFS  |    |
| | +-----+                        |    |      |    |
| |                                |    |      |    |
| +--------------------------------+    +---^--+    |
|                                           |       |
| +--------------------------------+        |       |
| |                      US-East-2 |        |       |
| | +-----+                        |        |       |
| | | web ++                       |        |       |
| | +----------------v[Mount Point]|        |       |
| |        +--------->      +---------------+       |
| | +------+                       |                |
| | | web ++                       |                |
| | +-----+                        |                |
| +--------------------------------+                |
+---------------------------------------------------+




## Amazon Storage Gateway
##########################

 - Virtual macine that you run on-premises with VMWare or HyperV
 		- Can also run on EC2 instances
 - Provides local storage resources backed by AWS S3 and Glacier
 - Often used in DR preparedness to sync to AWS
 - Useful in cloud migrations


New Name 		  	Old Name					Interface						Function
-----------   	---------------   ---------------     --------------
File Gateway		None 							NFS, SMB					Allow on-prem or EC2 instances
																									  to store objects in S3 via
																										NFS or SMB mount point

Volume Gateway	Gateway-stored 		iSCSI						Async replication of on prem data to s3
Stored Mode			volumes

Volume Gateway	Gateway-cache			iSCSI						Primary Data stored in S3 with
Cached Mode			volumes														frequently access data cached locally on-prem

Tape Gateway	Gateway-Virtual			iSCSI						Virtual media changer and tape library
         			Tape Library												for use with existing backup software


## Amazon WorkDocs
##########################
		(like dropbox)
	- Secure, fully managed file collaboration service
	- Can integrate with AD for SSO
	- HIPPA, PCI DSS and ISO compliance requirements
	- Available SDK for creating complementary apps


## Database on EC2
##########################
	- Run any database with full control  / flexibility
	- Must manage everything like backups, redundancy, patching, scale
	- Good option if you require a db not yet supported by RDS (i.e. DB2, SAP HANA)



## Amazon RDS
##########################

	- Managed database option for MySQL, Maria, PostgreSQL, SQL Server,
		Oracle and MySQL-compatible Aurora
	- Best for structured, relational data store needs
	- drop-in replacement for existing on-prem instances
	- Automated backups and patching in customer-defined maintenance windows
	- Push-button scaling, replication and redundancy

## RDS Anti-Patterns

	If you need ...										Don't use RDS, use this instead
	-----------------									-----------------------
	Lots of BLOB												S3
	Automated scalability 							DynamoDB
	Name / Value Data Structure 				DynamoDB
	Data not well stuctured 						DynamoDB
	Other DB (DB2, etc.)								EC2
	Complete control over db 						EC2


Multi-AZ RDS
	- Read-Replicas service regional users

NOTE for MySQL: non-transactional storage engines like MyISAM don't support
                replication; you muse use InnoDB (or XtraDB on Maria)

MariaDB is an open-source fork of MySQL.

	NOTE:  Sync replication to Standby
	       Aync replication to Read replica
---------------------------------------------------
| us-west-2																				|
|  ------------  	sync				------------				|
|  | Maria DB |		replication	| Maria DB |				|
|  | Master   |  	-------->		| Standby  |				|
|  ------------  							------------				|
|   us-west-2a   							us-west-2a					|
|				| 																				|
|				| 																			  |
--------|------------------------------------------
				|
				--------------------------
			                           |
---------------------------------|------
| eu-central-1									 |		 |
|  ------------  	async				   |     |
|  | Maria DB |		replication	   |     |
|  | Read     | <-----------------	   |
|  | Replica  |  	                     |
|  ------------  						           |
|   eu-central-1a   							     |
|																			 |
----------------------------------------

	- 1 AZ Fails
		- Stand-by in another AZ assumes role of master
		- Read replicas keep on working


	- if entire region fails
		- Read Replica promoted to Stand-Alone (Single-AZ)
		- Single-AZ reconfigured to Mult-AZ




## Amazon DynamoDB
##########################

	- Managed, multi-AZ NoSQL data store with Cross-Region Replication option
	- Defaults to eventual consistency reads but can request strongly consistent
	  read via SDK parameter
	- Priced on throughput, rather than compute
	- Provision read and write capacity in anticipation of need.
	- Autoscale capacity adjusts per configured min/max levels.
	- On-Demand Capacity for flexible capacity at a small premium cost.
	- Achieve ACID compliance with DynamoDB Transactions
	- Up to 400KB items **


	Relational vs. NoSQL

	relational : structured
	NoSQL : name / value pairs


	Partition Key ==>> Primary Key (Internal Hash)
	MUST BE UNIQUE
  Can access via key

	Composite Primary Key:  partition key + sort key i.e. OrderNum + timestamp
	Can have multiple instances of Partition Key but sort key MUST BE DIFFERENT

## Secondary Indexes

Index Type					Description									How to distinguish
-----------------   --------------------				------------------------
Global Secondary     Partition and sortkey can		I'm not restricted to partitioning
Index								 be different from those     of partition key.  I'm GLOBAL
										 on table

Local Secondary      Same partition as the table 	I have to stay local and respect
Index								 but different sort key 			table partition key but I can
																									choose sort key.

- ** Max 5 local and 5 global secondary indexes
- ** Max 20 attributes across all indexes
- Indexes take up storage space




## When to use Secondary Indexes

Index Type					Description									    Example
-----------------   --------------------				    ------------------------
Global Secondary     When you want a fast query			Query Sales Orders by Customer #
Index								 of attributes outside the      rather Sales Order $
										 primary key - without having
										 to do a table scan

Local Secondary      When you already know the 			I have Sales ORder #
Index								 partition key and want to      but I want to retrieve records
										 quicky query on another        with a certain Material #
										 attribute


## Attribute Projections
	- when creating an index, need to select which attributes are projected onto
	  that index
	- secondary index like a view

	Projection:
		- customerNum (key)
		  - customerName
		  - customerAddr1
		  - salesOrderNum
		  - timestamp


## Secondary index use cases

If you need to 						Consider				  		Cost						Benefit
-------------- 						--------				  		-----						---------
access just a few					Projecting just       Minimal					Lowest possible latency
attributes the fastest    those few attr												access for non-key items
way possible              in a global 2nd idx


frequently access some 		Projecting those      Moderate;				Lowest possible latency
non-key attributes        attr in a global			offset table		access for non-key items
													secondary index				scans


frequently access most 		Projecting those      Up to Double		Maximum flexibility
non-key attributes        attr or even entire
													table in global
													secondary index

rarely query but write 		Projecting keys only   Minimal 				Very fast write or
or update frequently 			for the global 												updates for non-partition
													secondary index 											key items.



## DynamoDB Accelerator (DAX)
	- Cache requests of DynamoDB
	- Reduce Read thruput

## Amazon Redshift
##########################

	- Fully managed, clustered peta-byte scale data warehouse

	- Extremely cost-effective as compared to some other on-premise
	  data warehouse platforms

	- PostgreSQL compatible with JDBC and ODBC drivers available;
	  compatible with most BI tools out of the box

	- Features parallel processing an columnar data stores which are
	  optimized for complex queries.

Redshift Spectrum:  option to query directly from data files on S3



## Data Lake
	- Large repository of data
	- Place tech on top to make use i.e.  ML / Analytics etc.
			- Query raw data without extensive pre-processing
			- Lessen time from data collection to data value
			- Identify correlations between disparate data sets



## Amazon Neptune
##########################
	- Fully managed graph database
	- Supports open graph APIs for both Gremlin and SPARQL

https://aws.amazon.com/neptune




## Amazon Elasticache
##########################

	- Fully managed implementations of two popular in-memory data stores:
			- Redis
			- Memcached
	- Push-button scalability for memory, writes and reads
	- In Memory key/value store - not "traditionally persistent"
	- Billed by node size and hourse of use

   Use												Benefit
   ----												----------
Web Session Store					store web session info in Redis so session info not lost
													if web server goes down

Database Caching 					Use Memcached in front of AWS RDS to cache popular queries
                          to offload work from RDS and return results faster to users

Leaderboards 							Use Redis to provide a live leaderboard for millions
                          users of mobile app

Streaming Data Dashboards 	Provide a landing spot for streaming sensor data
                          	on factory floor, real-time dashboards


		Memcached								vs. 								Redis
		----------																----------
		- Simple, no frills straight forward			 - you need encryption
		- Scale out/in as demand changes 					 - you need HIPPA compliance
		- Run multiple CPU cores / threads 				 - Support for clustering
		- You need to cache objects 							 - You need complex data types
																							 - You need HA / replication
																							 - Pub / Sub capability
																							 - Geospatial indexing
																							 - Backup / restore
     Barebones									 								Fancy Options



## Amazon Database Options
##########################

Database on EC2				- Ultimate control over database
              				- Prefereed DB no available under RDS

Amazon RDS    				- Need tradtional relational DB for OLTP
              				- Your data is well-formed and structured

Amazon DynamoDB    		- Name / value pair data or unpredictable data structure
              				- In-memory performance w/ persistence

Amazon Redshift    		- Massive amounts of data
              				- Primarily OLAP workloads

Amazon Neptune    		- Relationships between objects a major portion of data value

Amazon Elasticache    - Fast temporary storage for small amounts of data
              				- Highly volatile data


## Exam Tips
##########################

	- Read AWS Storage Options whitepaper, NOTE: anti-patterns

Know when to use various data stores:

	RDS 				Traditional relational data models
	    				Existing apps requiring RDBMS
	    				OLTP, ACID-compliant

	DynamoDB 		High I/O needs
							Scale dynamically

	S3 					BLOBs

	EC2 				Database not suppported under RDS
	    				Need complete control

	Redshift 		OLAP

Resources:
		AWS Whitepapers
		re:Invent Videos

Storage Options in the cloud
https://d1.awsstatic.com/whitepapers/Storage/AWS%20Storage%20Services%20Whitepaper-v9.pdf

Multi-Tenant SaaS Storage Strategies
https://d1.awsstatic.com/whitepapers/Multi_Tenant_SaaS_Storage_Strategies.pdf

Perfromance as Scale with Amazon Elasticache
https://d0.awsstatic.com/whitepapers/performance-at-scale-with-amazon-elasticache.pdf

Video: Deep Dive on Amazon S3 and Glacier Storage Management
https://www.youtube.com/watch?v=SUWqDOnXeDw

Video: Deep Dive on Amazon Relational Database Service
https://www.youtube.com/watch?v=TJxC-B9Q9tQ

Video: ElastiCache Deep Dive: Best Practies and Usage Patterns
https://www.youtube.com/watch?v=_YYBdsuUq2M

Video: Using Hybrid Storage with AWS Storage Gateway to Solve On-Premise Storage Problems
https://www.youtube.com/watch?v=9wgaV70FeaM


## Pro Tips - Storage
##########################

	- Archiving and Backup often great "pilot" to build AWS case
	- Make use of the S3 endpoints within your VPC
				- attach S3 endpoint to VPC
	- Learn how to properly secure your S3 bucket
	- Encrypt!!!
	- Consider Aurora for you production MySQL/Maria or PostgreSQL needs
	- Consider NoSQL if you don't need relational databases
	- Databases on EC2 cost less on the surface than RDS
			- remember costs of management (backups, pathing, OS-level hardening)
	- There can be a performance hit when RDS backups run if you only
	  have a single AZ instance.

## Lab Storage
https://github.com/ACloudGuru-Resources/Course_Certified_Solutions_Architect_Professional/tree/master/lab-storage

registry.opendata.aws

openaq
Resource type
    S3 Bucket
Amazon Resource Name (ARN)
    arn:aws:s3:::openaq-fetches

Athena works with JSON file

https://openaq-fetches.s3.amazonaws.com/index.html


1. Use AWS Glue
	- create crawler
	s3://openaq-fetches/realtime/2018-10-09


What city had the highest average ozone (O3) reading on October 9, 2018?




###################################################################################################
## Networking
###################################################################################################

Refresher:
	- Physical layout of AZs and Regions
	- VPC concept and how to create
	- Create private and public subnets
	- What a NAT is and what "Disable Source/Destination Check"   << WHAT IS THIS ??
									a NAT instance must be able to send and receive traffic
									when the source or destination is not itself. Therefore,
									you must disable source/destination checks on the NAT instance
	- Route table and routing terminology (default routes, local routes)
	- IPv4 Addressing and Subnet Mask Notation (/14, /24, etc)
	- Intermediate Networking Terminology: MAC address, port, gateway, router

## OSI Model:

Layer						Name							Example											Mnemonic
-----						-----							---------										-------------
 7							Application				Web Browser										Away
 6							Presentation			TLS/SSL, Compression 					Pizza
 5							Session						Setup, Negotiation, Teardown 	Sausage   ^
 4							Transport					TCP 													Throw     | Customer
 3							Network						IP, ARP 											Not      	| Responsibility
 ---------------------------------------------------------------------------------------
 2							Data Link					MAC														Do				| AWS
 1							Physical 					CAT5, fiber, 5GHZ							Please		v Responsibility


Multicast not allowed in AWS

Unicast: like a phone call
Multicast: Loudspeaker (MAC address level)

## TCP vs. UDP vs ICMP

Layer 4 Protocol		Characteristics							Plain Speak							Uses
----------------    ---------------							-----------             -----
 TCP 								Connection-based,						After everything I say	Web, Email, FTP
                    stateful, ack receipt				I want you to confirm

 UDP								Connectionless, 						I'm going to talk and		Streaming, DNS
 									  stateless, simple no			  its ok if you miss
 									  retransmission delays 			some words

 ICMP								Used by network devices, 		We routers can keep 		traceroute, ping
										to exchange info						in touch about network
																								health in our own language


## Ephemeral Ports
	- Short-lived transport protocol ports used in IP communications
	- Above the "well-known" IP ports (above 1024)
	- Dynamic Ports
	- Suggested range is 49152 to 65535
		- Linux kernels generally use 32568 to 61000
		- Windows platforms default from 1025
	- NACL and Security Group implications


## AWS Availability Zones
	- The Physical to Logical assignment of AZ's is done at Account Level
	 	i.e. Account 10's US-WEST-2A might not be same Physical data center as
		     Account 22's US-WEST-2A !!

		- Does this to balance load across data centers


## Network to VPC Connectivity
###############################
Amazon Global Network

AWS re:Invent 2016 Amazone Netowrk Overview by James Hamilton
https://www.youtube.com/watch?v=uj7Ting6Ckk

- AWS Managed VPN
- AWS Direct Connect
- AWS Direct Connect + VPN
- AWS VPN CloudHub
- Software VPN
- Transit VPC


## AWS Managed VPN
#####################
What: 	AWS managed IPsec VPN connection over your existing internet

When: 	Quick and usually simple way to establish a secure tunneled connection
      	to a VPC; Redundant link for Direct Connect or other VPC VPN

Pros: 	Supports static routes or BGP peering and routing

Cons: 	Dependent on your Internet connection



## AWS Direct Connect
#####################

What: 	Dedicated network connection over private lines straight into AWS backbone

When: 	Require a "big pipe" into AWS; lots of resources and services being
      	provided on AWS to you corporate users

Pros: 	More predictable network performance; potential bandwidth cost reduction;
				up to ** 10 Gbps provisioned connections; Supports BGP peering and routing

Cons: 	May require additional telecom and hosting provider relationships and/or
 				new network circuits

How: 		Work with your existing Data Network Provider; Create Virtual Interfaces
        (VIF) to connect to VPCs (private VIF) or other AWS service like S3
				or Glacier (public VIF)

## AWS Direct Connect Plus VPN
###############################

What: 	IPSec VPN connection over private lines

When: 	Want added security of encrypted tunnel over Direct Connect

Pros: 	More secure (in theory) than Direct Connect alone

Cons: 	More complexity introduced by VPN layer

How: 		Work with your existing Data Networking Provider




## AWS VPN CloudHub
###############################

What: 	Connect locations in a Hub and Spoke manner using AWS Virtual Private Gateway

When: 	Link remote offices for backup or primary WAN access to AWS resources
				and each other

Pros: 	Reuses existing Internet connection; Supports BGP routes to direct
				traffic (i.e. use MPLS first then CloudHub VPN as backup)

Cons: 	Dependent on Internet connection; No inherent redundancy

How: 		Assign multiple Customer Gateways to a Virtual Private Gateway,
				each with their own BGP ASN and unique IP ranges


## Software VPN
###############################

What: 	You provide your own VPN endpoint and software

When: 	You must manage both ends of the VPN connection for compliance
				reasons or you want to use a VPN option not supported by AWS

Pros: 	Ultimate flexibility and manageability

Cons: 	You must design for any needed redundancy across the whole chain.

How: 		Install VPN software via Marketplace appliance or on an EC2 instance


## Transit VPC
###############################

What: 	Common strategy for connecting geographically disperse VPCs and
				locations in order to create a global network transit center

When: 	Locations and VPC-deployed assets across multiple regions that need to
				communicate with one another

Pros: 	Ultimate flexibility and manageability but also AWS-managed VPN
				hub-and-spoke between VPCs

Cons: 	You must design for any needed redundancy across the whole chain.

How: 		Providers like Cisco, Juniper Networks and Riverbed have offerings
				which work with their equipment and AWS VPC.



###################################################################################################
## Fundamentals:  Subnets & CIDR
###################################################################################################

     		Network			Host 									Hosts per
Class		Range				Range			Networks		Network
  A          0 . 0.0.0
           127 . 255.255.255		 128			 16,777,216
  B        128.0 . 0.0
        191.255  . 255.255		 	16,384 		     65,536
  C      192.0.0 . 0
    223.255.255  . 255		 			2,097,152 		  256



Class 				Private Subnet Range 					Subnet Mask
  A							10.0.0.0										255.0.0.0
  B							172.16.0.0									255.255.0.0
  C							192.168.0.0									255.255.255.0


## CIDR:  Classless Inter-Domain Routing

ex.   10.0.1.0/24

divided into two subnets =

	10.0.1.0/25     (127 hosts)   10.0.1.1   - 127
	10.0.1.128/25   (126 hosts)   10.0.1.128 - 254


VPC:  			10.0.1.0/24
	subnet 1: 10.0.1.0/25
	subnet 2: 10.0.1.128/25



## VPC to VPC Connectivity
###############################

 - VPC Peering
 - Software VPN
 - Software to AWS Managed VPN
 - AWS Managed VPN
 - AWS Direct Connect
 - AWS PrivateLink



## VPC Peering
###################

What: 	AWS-provided network connectivity between two VPCs

When: 	Multiple VPCs need to communicate or access each others resources

Pros: 	Uses AWS backbone without touching the Internet

Cons: 	If A connect to B and B connected to C, A cannot talk to C via B.
        (transitive peering not supported)

How: 		VPC Peering request is made; Accepter accepts request (either within
 				Account or across Accounts)
NOTE: Connecting VPCs together

## AWS PrivateLink
###################

What: 	AWS-provided network connectivity between VPCs and/or AWS services
				using interface endpoints

When: 	Keep Private subnets truly private by using the AWS backbone to reach
				other services rather than the public Internet

Pros: 	Redundant: uses AWS backbone

Cons: 	As of October 2018, VPC endpoints can be accessed over inter-region VPC peering

How: 		Create Endpoint for needed AWS or Marketplace service in all needed subnets;
				access via the provided DNS hostname
NOTE: Connecting services together via VPC endpoints


## VPC Endpoints
###################

	- Two types of endpoints:  Interface and Gateway endpoint
										Interface								Gateway
										Endpoint								Endpoint
										----------							----------
What					Elastic Network Interface 		A gateway that is a target for a
						  with a Private IP							specific route

How							Uses DNS entries to					Uses prefix lists in the route table
								redirect traffic						to redirect traffic

What Products		API Gateway, Cloud Formation,			Amazon S3, DynamoDB
								CloudWatch, etc.

Securing				Security Groups 								VPC Endpoint Policies


## Internet Gateways
#####################
	- Internet Gateway
	- Egress-Only Internet Gateway
	- NAT Instance
	- NAT Gateway


## Internet Gateway
	- Horizontally scaled, redundant and highly available component that allows
	  communication between your VPC and the Internet
	- No availability risk or bandwidth constraints
	- If your subnet is associated with a route to the Internet, that it is a
		public subnet
	- Supports IPv4 and IPv6

	Purpose 1: Provide route table target for Internet-bound traffic
	Purpose 2: Perform NAT for instances with public IP addresses
		NOTE: DOES not perform NAT for instances with private IP's only


## Egress-Only Internet Gateway
	- Used for IPv6 addresses only
	- IPv6 addresses are globally unique and are public by default.
	- Provides outbound Internet access for IPv6 addressed instances
	- Prevents inbound access to those IPv6 instances
	- Stateful - forwards traffic from instance to internet and then sends back
	  the response
	- Must create a custom route for ::/0 to the Egress-Only Internet Gateway
	- Use Egress-Only Internet Gateway instead of NAT for IPv6


## NAT Instance
	- EC2 instance from a special AWS-provided AMI
	- Translate traffic from many private IP instance to a single public IP and back
	- Doesn't allow public Internet connections into private instances
	- Not supported for IPV6 (use Egress-Only Gateway)
	- NAT Instance must live on a public subnet with route to Internet Gateway
	- Private instances in private subnet must have route to the NAT instance,
	   usually the default route destination of 0.0.0.0/0


## NAT Gateway
	- Fully-managed NAT service that replaces need for NAT Instances on EC2
	- Must be created in a Public subnet
	- Uses and Elastic IP for public IP for the life of the Gateway
	- Private instances in private subnet must have route to the NAT instance,
	  usually the default route destination of 0.0.0.0/0
	- Created in specified AZ with redundance for that zone
	- For multi-AZ redundancy, create NAT Gateways in each AZ with routes for
	  private subnets to use the local Gateway
	- Up to ** 5Gbps bandwidth that can scale up to 45 Gbps
	- Can't use a NAT Gateway to access VPC peering, VPN or Direct Connect, include
		specific routes to those in your route table (remember most specific route
		  is selected first)


								NAT Gateway												NAT Instance
								------------ 											-------------
Availability		Highly available within AZ				On your own
Bandwidth				Up to ** 45 5Gbps									Depends on bandwidth of instance type
Maintenance			Managed by AWS										On your own
Performance			Optimized for NAT 								Amazon Linux AMI configured to perform NAT
Public IP				Elastic IP that    								Elastic IP that can be detached
                can not be detached
Security Groups	 Cannot be associated with				Can use Security Groups
								 NAT Gateway (?)
Bastion Server 	Not supported 										Can be used as a bastion server


## Routing
#####################

VPC Context
	- Route Tables
	- Border Gateway Protocol

Route 53 Context
	- Routing Policies

Elastic Load Balance Context
	- Request Routing


## Routing Tables
	- VPCs have an implicit router and main routing table
	- You can modify the main routing table or create new tables
	- Each route table contains a local route for the CIDR block
	- Most specific route for an address wins

		Destination								Target
		-----------								-------
		10.0.0.0/16								local
		192.168.0.0/24 						vpg-xxxxxxxxxxx     << VPN Gateway
		0.0.0.0./0 								nat-xxxxxxxxxxx     << NAT Gateway
*		pl-xxxxxxxxxxx     				vpce-xxxxxxxxxxx    << VPC Endpoint (PrivateLink)

* prefix list is a predefined mapping of all IP addresses that make up service endpoint


		Ex. Address							Target
		10.0.45.34							local
		64.56.34.1							nat-xxxxxxxxxxx
		192.168.0.7							vpg-xxxxxxxxxxx
		Resolved IP
		address of S3						vpce-xxxxxxxxxxx
		10.0.255.255						<null> Broadcast address on 10.0.0.0. Not supported by VPC


## Border Gateway Protocol
	- Popular routing protocol for the Internet
	- "Propogates" information about the network to allow for dynamic routing
	- Required for Direct Connect and optional for VPN
	- Alternative of not using BGP with AWS VPC is static routes
	- AWS supports BGP community tagging as a way to control traffic scope and
	  route performance
	- Requirted TCP port 179 + ephemeral ports
	- Autonomous System Number (ASN) = Unique endpoint identifier
	- Weighting is local to the router and higher weight is preferred path for
		outbound traffic


## Enhanced Networking
#######################
	- Generally used for High Performance Computing use-cases
	- Uses single root I/O virtualization (SR-IOV) to deliver higher performance
		than traditional virtualized network interfaces
	- Might have to install driver if other than Amazon Linux HVM AMI
	- Intel 82599 VF Interface
			- 10 Gbps
	- Elastic Network Adapter
			- 10 Gbps


## Placement Groups
				Clustered															Spread
				-------------													-------------
What 		Instances are placed into 						Instances spread across
				low-latency group within a 						underlying hardware
				single AZ

When 		Need low network latency and/or				Reduce risk of simultaneous failure
				high network throughput								if underlying hardware fails

Pros		Get the most out of 									Can span multiple AZ's
				Enhanced Networking instances

Cons		Finite capacity: recommend						** Max of 7 instances running
				launching all you might need					per group per AZ
				up front


## Route 53
############
	- Register domain names
	- Check the health of your domain resources
	- Route internet traffic for your domain

	Should know
	- What a DNS is
	- DNS record types: A, CNAME, MX, TXT
				A:  	 host address
				ALIAS: auto resolved alias
				CNAME: canonical name for an alias
				MX: 	 mail exchange
				TXT: 	 descriptive text
	- Route 53 Concepts (alias, hosted zone, etc)
	- Why called Route 53 (reference TCP/UDP port for DNS server requests: 53)

# Route 53 Routing Policies

Policy							Route 53 Action
--------						----------------
Simple							Here is destination for that name
Failover						Route to failover because health check on Primary is down
Geolocation					You're in Europe, route you to the closer resource
Geoproximity				You're closer to US-EAST-1, route there instead of US-WEST-1
Latency							Which resource has lower latency
Multivalue Answer		Return several IP addresses, like a load balancer
Weighted						Setup multiple records, and route according to % or weight assigned


NOTE: Bias on geo-proximity record (positive +99, negative -99)
		- positive bias increases geo-proximity circle
		- negative bias decreases geo-proximity circle

NOTE: Multivalue Answer:  multiple IP addresses point to same CNAME

NOTE: Weighted routing values can be from ** 0 - 255
				0 disables traffic to that endpoint (i.e. blue green deployment)

					% of Traffic = Weight for a specific record / Sum of all weights all records



## CloudFront
################

	- Distributed content delivery service for simple static asset caching up to
	  4k live and on-demand video streaming

	- Understand how to create CloudFront distribution and understand edge location

	- Integrated with Amazon Certificate Manager and supports SNI (Server Name Indication)

## SSL TLS SNI

	Want at least TLS v1.2

	SNI (Server Name Indication): Client asks for which host to connect to and server
	  	offers multiple certificates on same IP.  (Few old browsers don't support)

	Security Policy:
			- TLSv1
			- TLSv1_2016
			- TLSv1.1_2016
			- TLSv1.2_2018



## Elastic Load Balancer
###########################

	- Distributes inbound connections to backend endpoints
	- Three options:
				- Application Load Balancer (Layer 7)
				- Network Load Balancer (Layer 4)
				- Classic Load Balancer (Layer 4 or 7)
	- Used for public / private workloads

													Application LB			Network LB			Classic LB
													---------------			---------- 			------------
Protocols									HTTPS, HTTP						TCP 					TCP, SSL, HTTP, HTTPS
Path or host-based						YES								NO								NO
  Routing
SSL Off Loading								YES								NO								YES
SNI														YES								NO								NO
Sticky Sessions								YES								NO								YES
Static IP/ Elastic IP					NO								YES								NO
User Authentication						YES								NO								NO


## Application Load Balancer

	Routes login.acme.com/customer to different Target Group vs.
	       login.acme.com/vendor

## Network Load Balancer
	- Excel at speed

## Sticky Sessions
	- Identifies which client is assigned which server.


Use these addresses from NLB back to on-prem:
10.0.0.0/8
172.16.0.0/12
192.168.0.0/16
100.64.0.0/10
RFC 1918 / RFC 6598

NLB gets assigned Single IP Addr for each AZ

## Exam Tips
###########################
VPCs:
 - Know pros and cons of each On-prem AWS Connection mode
 - Know the functions of the different VPC components
 		- Customer GW
 		- Virtual Private GW
 - Know that Direct Connect is not inherently redundant
 		- Know how to architect a network that is (VPN, 2ndary direct connect )
 - Multicast and Broadcast aren't supported in VPCs
 - Know what is meant by stateless, stateful, connectionless and
   connection-based in terms of IP protocols
 - Know what ephemeral ports are and why they might be needed in a NACL or SG

Routing:
 - Understand BGP and how to use weighting to shift network traffic
 - Know how routes in a route table are prioritized (most specific wins)
 - What other routing protocols does AWS support (none, only BGP )

VPC Peering:
 - CIDR ranges cannot overlap.
 - After VPC owner accepts a peering request, routes must be added to
   respective route tables
 - Transitive peering is not supported, but mesh or hub and spoke are, with
   proper NACLs and routes
 - A Transit VPC is supported

Internet Gateways:
 - Difference between NAT Instance and NAT GW
 - Internet GWW is horizontally scaled, redundant with no bandwidth constraints
 - NATs do have bandwidth contraints but..
 - VPCs can have multiple NATs across AZs and subnets for scale -
   so long as routes are defined properly
 - Use Egress-Only Gateway for IPv6

Route 53:
 - Understand different types of routing policies and use cases.
 - Know the Weighted Routing Formula
 - Route 53 is a global service

CloudFront:
 - Understand what must happen to use a custom domain with CloudFront
 - Understand what SNI enables and the necessary alternative

Elastic Load Balancer:
 - Know the three different types of Load Balancers and  at which OSI Layer they work
 - Understand which major features each deliver ( protocol, SNI Sticky Sessions)
 - Know what sticky sessions are and when they come into play.

Connecting Many VPCs:
https://www.youtube.com/watch?v=KGKrVO9xlqI

Amazon VPC Network :
https://www.youtube.com/watch?v=8gc2DgBqo9U

Deep dive into the New Network Load Balancer :
https://www.youtube.com/watch?v=z0FBGIT1Ub4

## Pro Tips
###########################

 - Direct Connect may be a more complex and costlier option to setup, but it
   could save big on bandwidth costs
 - Explicitly deny as must traffic as you can with NACLs and SG
 		- Principle of Least Privilege
 - Think through your VPC layout (see 2017 re:Invent video "Networking May VPCs:
    Transit and Shared Architecture")
 -  You can use Route 53 for your domain even if AWS isn't your registrar.
 -  ELBs provide a useful layer of abstraction (as does Route 53 too)








###################################################################################################
## Security
###################################################################################################

## Concepts
###########################

Shared Responsibility Model
		- Customer:  Platform, App, OS, IAM, Client Data, Encryption, etc.
		- AWS: Compute, Storage, DB, Networking, Regions, AZ, Edge locations


Principle of Least Privilege
	- Give user only access they need, only when they need it.


Security Facet 			Description   							AWS Example
--------------      --------------- 						------------------
Identity						Who you are?								Root Account User, IAM User
																								Temp Security Credentials

Authentication			Prove that you are you			Multi-factor Authentication
																								Client-side SSL Certificate

Authorization				Are you allowed to do this 	IAM Policies

Trust 							Do other entities that I 		Cross-Account Access,
      							trust say they trust you?		SAML-based Federation,
      																					Web Identity Federation



## Identity Providers / Identity Brokers

							+-----------------------------------------------+
              |                                               |     +--------------------+
              |                                               |     | +----+   +-----+   |
              |            Identity Store (Directory)         |     | |    |   |     |   |
              |     ID          Secret        Privileges      |     | +----+   +-----+   |
              |    sue          xxx             111           |     |                    |
              |    joe          yyy             222           |     |  +-------------+   |
              |    root         zzz             234           |     |  +-------------+   |
              |                                               |     +--------------------+
              |                  |         ^                  |         Service Providers
 Identity     |                  |         |                  |
 Providers    |                  v         |                  |               ^
              |           +---------------------------+       |               |
 [facebook]   |           |                           |       |               | (key)
              | +------>  |                           |       |               |
 [google]     |Federation |                           | +---> |       +---------------+
              | <------+  |                           | (key) |       +---------------+
 [cognito]    |           |                           |       |
              |           |                           | <---+ |       +---------------+
              |           |                           |       |       +---------------+
              |           +---------------------------+       |
              |                  Identity Broker              |       +---------------+
              |                                               |       +---------------+
              +-----------------------------------------------+						 Identities
                     Identity Provider



## Authentication Flow

Service Provider                     User Agent                Identity Provider
----------------                     ----------                -----------------
   | <----- Give Me Access ----------   |                                    |
   |                                    |                                    |
	 | ---- Go ask Identity Provider ---> |                                    |
   |                                    |                                    |
   |                                    | --I Was sent by Service Provider-> |
   |                                    |                                    |
   |                                    | <---- Authentication Please -----  |
   |                                    |                                    |
   |                                    | --- Here is my authentication -->  |
   |                                    |                                    |
   | <--- Let this person in, they check out ------------------------------  |
   |                                    |                                    |
	 | ----------- Come on in ----------> |                                    |
   |                                    |                                    |



## SAML vs. OAuth vs. OpenID

SAML 2.0
	- can handle authorization and authentication
	- XML-based protocol
	- Can contain: user, group memebership an other info
	- Assertions in the XML for authentication, attributes or authorization
	- Best Suited for Single Sign-on for Enterprise users

OAuth
	- Allows sharing of protected assets without having to send login credentials
	- Handles authorization (can you do it) only, not authentication (who are you)
	- Issues token to the client
	- Application validates token with Authorization Server
	- Delegate access, allowing the client apps to access info on behalf of user
	- Best suited for API authorization between apps

OpenID Connect
	- Identity layer built on top of OAuth 2.0, adding authentication
	- Uses REST/JSON message flows
	- Supports web clients, mobile, clients, Javascript clients
	- Extensible
	- Best suited for Single Sign-on for consumer


## Compliance
	- AWS Artifact
	- ISO 9001, ISO 27001, ISO 27017,  ISO 27018, PCI DSS Level 1, SOC 1, SOC 2, SOC 3



## Multi-Account Management
###########################

	- Most large orgs will have multiple AWS Accounts
	- Segregation of duties, cost allocation, and increased agility
	- Need methods to properly manage and maintain them.

## When Should You Use Multiple Accounts?
	- Do you require administrative isolation between workloads ?
	- Do you require limited visibility and discoverability of workloads ?
	- Do you require isolation to minimize "blas radius" ?
	- Do you require strong isolation of recovery and/or auditing data ?


## AWS Tools for Account Management
	- AWS Organizations
			- hierarchy or orgs
	- Service Control Policies
			- policies on sub-accounts
	- Tagging
	- Resource Groups
	- Consolidated Billing


## Identity Account Structure
	- Manage all users in Identity Account
	- Create IAM Groups and assign users
	- Create Cross account roles
	- Assign roles to sub-account: business unit, env, geography

  +--------------+                   +-------------+
  |              |          -------> |  Operations |
  | [IAM Users]  |          |        |  Account    |
  |              |          |        | [IAM Role]  |
  |              |          |        +-------------+
  |              |          |
  |              |          |        +-------------+
  | [IAM Groups] |  ---------------> | Marketing   |
  |              |                   | Account     |
  |              |                   | [AIM Role]  |
  +--------------+                   +-------------+


## Logging Account Structure
	- Centralized logging repo
	- Can be secured so as to be immutable
			- generated from sub-accounts but can't change
	- Can use Service Control Policies to prevent
    sub-accounts from changing logging settings


  +-----------------+                   +-------------+
  | Logging Account |          -------- |  Operations |
  | Lambda          |          |        |  Account    |
  |  ^    QuickSight|          |        | CloutdTrail |
  |  |      |       |          |        +-------------+
  |  |      |       |          |
  |  |      v       |          |        +-------------+
  | [Enterprise]    | <---------------- | Marketing   |
  | [Logging   ]    |                   | Account     |
  | [Buckets   ]    |                   | AWS Config  |
  +-----------------+                   +-------------+

## Publishing Account Structure
	- Common repo for AMI's, Containers Code
	- Permits sub-accounts to use pre-approved standardized services or assets

  +---------------------+                   +-------------------+
  | Publishing Account  |                   |  Operations Acct  |
  | [Service Catalog]   |                   |                   |
  |                     |          |------> |   EC2 Instances   |
  |     [EC2 AMIs]      | ----------        +-------------------+
  |                     |
  | [Elastic Container] |                   +---------------------+
  | [Registry         ] | ------------      | Marketing Acct      |
  |                     |            |      |                     |
  |                     |            -----> | [Docker Container]  |
  |   [CodeCommit]      | -------|          |                     |
  |                     |        ---------> |  Developers         |
  +---------------------+                   +---------------------+



## Information Security Account Structure
  - Hybrid of consolidated security and logging
  - Allows one point of control and audit
  - Logs cannot be tampered with by sub-account users


## Central IT Account Structure
  - IT can manage IAM Users and groups while assigning
	  to sub-account roles
  - IT can provide shared services and standardized assets
	  (AMI's, databases, EBS, etc.) that adhere to corportate policy


  +---------------------+                   +-------------------+
  | Central IT Account  |                   |  Operations Acct  |
  |                     |                   |  [Biz unit data]  |
  |                     |            |----> |   Admin Role      |
  |   [IAM Users]       | -----|-----        +-------------------+
  |                     |      |
  |                     |      |            +---------------------+
  |  [Service Catalog]  |      |------      | Marketing Acct      |
  |                     |            |      |                     |
  |                     |            -----> | [IT Approved EC2 ]  |
  |   [EC2 AMIs]        | -------|          |                     |
  |                     |        ---------> |  Developer Role     |
  +---------------------+                   +---------------------+



## Organization Units (Multi-Account)
  - Consolidated billing allows for economy of scale
	  by grouping into single invoice
  - Consolidated security: utilize roles and federation Active Directory
  - Service Control Policies: cascade down a tree
			i.e. apply Service Control Policy (read-only) to Medical Equipment it
			     gets cascaded to Medical Equipment -> Regulated and Unregulated
  - NOTE: use Security(?) Control Policy to blacklist AWS services from
	        being used in sub-accounts


                                     [Root Account]
              -----------------------------|--------------------------
              |             |              |                         |
 [Consolidated Billing]     |    [Consolidated Security] 		 [Holding Company]
                            |
                            |
        |-------------------|----------------------|----------------------|
        |                   |                      |                      |
  [Consumer Products]      [Heavy Machinery] 	  [Automotive]			[Medical Equipment]
      |                                            |                  |
      |--[Marketing]                               |--[Americas]      |--[Regulated]
      |                                            |                  |
      |--[Manufacturing]                           |--[AsiaPacific]   |--[Unregulated]
      |                                            |
      |--[Finance ]                                |--[Africa]


## Security Groups
	- Virtual firewalls for individual assets (EC2, RDS, AWS Workspaces)
	- Controls inbound / outbound traffic for: TCP, UDP, ICMP or custom protocols
	- Port or port ranges
	- Inbound  rules set by Source IP, Subnet, other Security Group
	- Outbound rules set by Source IP, Subnet, other Security Group
	- Remember ephemeral ports for Outbound if you need them.


## Network Access Control Lists (NACLs)
	- Additional layer of security for VPC that acts as a firewall
	- Apply to entire subnets rather than individual assets
	- Default NACL allows all inbound and outbound traffic
	- NACLs are STATELESS:
			- outbound traffic obeys outbound rules
			- no connection maintained  (Security Groups are STATEFUL)
	- Can duplicate or further restrict access along with Security Groups
	- Remember ephemeral ports for Outbound if you need them

## Why use SGs and NACLs
	- NACLs provide a backup method of security if you accidentally change
	  you SG to be too permissive
	- NACLs cover entire subnet so users can create new instances and are
	  still protected if they assign the incorrect SG
	- Part of a multi-layer Least Privilege concept to explicitly allow and deny



## AWS Directory Services
###########################

## Types of Directory Services Offered

AWS Cloud Directory:  Cloud-native directory to share and control access to
                      hierarchical data between applications
            Best For: Cloud applications that need hierarchical data w/
						          complex relationshipos

Amazon Cognito :  Sign-up and sign-in functionality that scales to millions
                  of users and federated to public social media services
            Best For: Consumer apps or SaaS

AWS Directory Service :  AWS-manged full Microsoft Active Directory
for MS AD                (std or enterprise) running on Windows Server 2012 R2
            Best For: Enterprises that want hosted MS AD or you need
						          LDAP for Linux apps

AD Connector   :  Allows on-premises users to log into AWS Services
                  with their existing AD credentials. Also allows
									EC2 instances to join AD domain.
            Best For: Single sign-on for on-prem employees and for adding
						          EC2 instances to the domain.

Simple AD       :  Low scale, low cost AD implementation based on SAMBA
            Best For: Simple user directory, or you need LDAP compatibility


## AD Connector vs. Simple AD
	AD Connector
			- Must have existing AD
			- Existing AD users can access AWS assets via IAM roles
			- Supports MFA via existing RADIUS-bases MFA infrastructure

	Simple AD Connector
			- Stand-alone AD based on Samba
			- Supports user accounts, groups, group policies and domains
			- Kerberos-based SSO
			- MFA not supported
			- NO Trust Relationships


## Credential and Access Management
####################################

 - Know what IAM is and components
 - Users, Groups, Roles, Policies
 - Resource-based Policies vs. Identity-Based Policies
 - Know how to read and write policies in JSON
 - Services -> Actions -> Resources

## AWS Security Token Service
	- Temporarily grant credential access to applications or users
	- Can source credentials from: IAM, Active Directory, Facebook, Google

                                        +----------+
                               -------> |  Active  |
                               |        | Directory|
                               |        +----------+
                               |
                               |        +-----------+
                +----------+   -------> |  Facebook |
+----------+    | AWS      |   |        +-----------+
|  AWS IAM | -> | Secruity |-> |
+----------+    | Token    |   |        +-----------+
                | Service  |   -------> | Google    |
                +----------+            +-----------+

## Amazon Cognito used for Mobile Applications



+----------+          +----------+
|  Cognito | -------> |  Mobile  |
+----------+          |  Cognito |
                      |  SDK     |
                      +-----------+


## Security Token Service Flow
							+-----------------------------------------------+
              |                                               |     +--------------------+
              |                                               |     | +----+   +-----+   |
              |            Identity Store (Directory)         |     | |    |   |     |   |
              |     ID          Secret        Privileges      |     | +----+   +-----+   |
              |    sue          xxx             111           |     |                    |
              |    joe          yyy             222           |     +--------------------+
              |    root         zzz             234           |     AWS Service Providers
              |                                               |               ^
              |                  |     ^                      |               |
 Identity     |                  |     |                      |               |
 Providers    |                  v     |     +----->[STS]     |               |
              |           +----------------------+    |       |               |
 [facebook]   |           |                      |    |       |               | (token)
              | +------>  |                      |    |       |               |
 [google]     |Federation |                      |    |       |               |
              | <------+  |                      |    |(token)|       +---------------+
 [cognito]    |  (token)  |                      |    +-------------> |               |               ||
              |           |                      |            |       |  Applications |
              |           |                      | <----------|       |               |
              |           +----------------------+            |       +---------------+
              |                  Identity Broker              |
              |                                               |
              +-----------------------------------------------+
                     Identity Provider



## Web Identity Federation Playground
	- Authenticate with Identity Provider
				- Amazon, Google, Facebook
				ex. Sign in into Google, get token from STS
				    using AssumeRoleWithWebIdentity

## Token Vending Machine Concept
	- Common way to issue temp credentials for mobile app development
	  - Anonymous TVM: used as a way to provide access to AWS Services only,
		                 does not store user identity
	  - Identity TVM : used for registration and login and authorizations
  - AWS now recommends that mobile developers use Cognito and related SDK


## AWS Secrets Manager
	- Store passwords, encryption keys, API keys, SSH keys, PGP keys, etc.
	- Alternative to store passwords or keys in a "vault" (software / physical)
	- Can access secrets via API with fine-grained access control provided by IAM
	- Automatically rotate RDS database credentials for MySQL, PostgreSQL and Aurora
	- Better than hard-coding credentials in scripts / applications



## Encryption
################

 - Encryption At Rest
	- Data is encrypted were it is stored: EBS, S3, RDS, or in
	  SQS queue to be processed

 - Encryption in transit
	- Data is encrypted as it flows throught a network or process,
	  such as SSL/TLS or HTTPS or with IPSec for VPN connections


## Key Management Service

 - Key storage, management and auditing
 - Tightly integrated into MANY AWS services like Lambda, S3, EBS,
   EFS, DynamoDB, SDS
 - Import your own keys or have KMS generate them
 - Control who manages accesses keys via IAM users and roles
 - Audit use of keys via CloudTrail
 - Differs from Secret Manage as its purpose-built for encryption key mgmt
 - Validated by many compliance schemes (PCI DSS Level 1, FIPS 140-s Level 2)


## CloudHSM

 - Dedicated hardware device, single tenanted
 - Must be within a VPC and can access via VPC peering
 - Does not natively integrate with many AWS services like KMS
   but rather requires custom application scripting
 - Offload SSL from web servers, act as an issuing CA, enable TDE for
  Oracle databases

 										"Classic" CloudHSM								Current CloudHSM
Device 							  safeNet Luna SA										Proprietary
Pricing			 					Upfront cost $5000							No Upfront cost/ pay per hr
High Avail						Have to buy 2nd device					Clustered
FIPS 140-2 						Level 2													Level 3





## CloudHSM vs. KMS

 										"Classic" CloudHSM								AWS KMS
Tenancy								Single-Tenant HSM								Multi-Teneant AWS Service

Availability 					Customer managed durability			Highly available and duralbe
											and availability								key storage and management

Root of Trust					Customer managed 								AWS managed root of trust
                      root of trust

FIPS 140-2						Level 3													Level 2 / Level 3 in areas

3rd Party Support			Broad 3rd party support 				Broad AWS Service Support



## AWS Certificate Manager

  - Manged service that lets you provision, manage, deploy public or
	  private SSL/TLS certificates
  - Directly integrated into many AWS Services: CloudFront, ELB and API GW
  - Free public certificates to use w/ AWS Services.  No need to register via
	  3rd party certificate authority
  - can import 3rd party certificates for user on AWS
  - Supports wildcard domains (*.domain.com) to cover all sub-domains
  - Managed certificate renewal
  - Can create a managed Private Certificate Authority as well for internal
	  or proprietary apps, services or devices



## Distributed Denial of Service Attacks
#########################################

# Distributed Denial of Service Attacks
	- overwhelming requests/traffic flooding a web service

# Amplification / Reflection Attacks
	- small request / large response
	  i.e. MONLIST NTP to a spoofed address

# Application Attacks (Layer 7)
  - HTTP GET Flood, affects http servers, DB, back-end services

# Mitigating DDOS

	     **	Best Practice 								AWS Service
					-------------                 ---------------
     Minimize Attack Surface						NACL, SGs, VPC Design
		 Scale to absorb attack							Auto Scaling Group,  CloudFront
		 																		Static Web Content via S3
		 Safeguard exposed resources 				Route 53, AWS Web App Firewall, AWS Shield
		 Learn normal behavior							AWS GuardDuty, CloudWatch
		 Have a plan												ALL YOU



## Intruder Detection System IDS / Intruder Prevention System IPS
##################################################################

  - Intruder Detection System watches the network and systems for suspicious
	  activity that might indicate someone trying to compromise a system

  - Intruder Prevention System tries to prevent exploits by sitting behind
	  firewalls and scanning and analyzing suspicious content for threats

IPS (Intruder Prevention System) differs from an IDS
(Intrusion Detection System) in that it can automatically
take action on intrusions, like blacklist an offending IP address

  - Normally comprised of a Collection / Monitoring system and monitoring agents
	  on each system

  - Logs collected or analyzed in CloudWatch, S3 or 3rd parts tools (Splunk, etc)
		sometimes called a Security Information and Event Management system.




		CloudWatch													CloudTrail
		----------                         -------------
Log events across AWS services, 			Log API activity across AWS services,
  Think operations													Think activities

Higher-level comprehensive 						More low-level granular
 monitoring and eventing

Log from multiple accounts						Log from multiple accounts

Logs stored indefinitely							Logs stored to S3 or CloudWatch indefinitely

Alarms history for 14 days						No native alarming; can use
																			CloudWatch alarms



## AWS Service Catalog
#######################

	- Framework allowing administrators to create pre-defined products
	  and landscapes for their users.
	- Granular control over which users have access to which offerings
	- Makes use of adopted IAM roles so users don't need underlying service access
	- Can add or take away access to services via Service Catalog
	- Allows end users to be self-sufficient while upholding enterprise standards
	  for deployments
	- Based on CloudFormation templates
	- Admins can version and remove products.  Existing running product versions
	  won't be shutdown.


## AWS Service Catalog Constraints

Type: Launch Constraint
What: IAM role that Service Catalog assumes when an end-user launches a product.
Why:  Without launch constraint, user must have all perms needed within own IAM creds.

Type: Notification Constraint
What: Specifies Amazon SNS topic to receive notifications about stack events.
Why:  Can get notification when products are launched or have problems

Type: Template Constraint
What: One or more rules that narrow allowable values an end-user can select
Why:  Adjust product attributes based on choices a user makes.
      ex. Only allow certain instance types for DEV env
			(like a wizard)

## Multi-Account Scenario
	- Can share Service Portfolio with another account
  - Can have an "Imported Portfolio" with a local Portfolio
  - Can add launch constraints locally
  - Launch role in sub-account is inherited from shared portfolio (master account)


## Exam Tips
#######################

Multi-Account Management:
	- know different models and best practices for cross account management of security
	- know how roles and trusts are used to create cross-account relationships and
	  authorizations.

Network Controls and Security Groups:
	- Know difference and capabilities fo NACLs and SGs.
	- NACLs are stateless (watch for ephemerals)
	- Get some hands-on with NACLs and SGs to reinforce your knowledge.
	- Remember the ephemerals

AWS Directory Services:
	- Understand the types of Directory Services offered by AWS
     especially AD Connector and Simple AD
	- Understand use-cases for each type of Directory Service
	- Be familiar with how on-prem Active Directory implementation might
	  connect to AWS and what functions that might enable.

Credential and Access Management:
	- Know IAM and its components
	- Know how to read and write IAM policies in JSON
	- Understand Identity Brokers, Federation and SSO
	- Know options and stpes for temporary authorization

Encryption :
	- Know differences between AWS KMS and CloudHSM and use cases
	- Test will likely be restricted to classic CloudHSM
	- Understand AWS Certificate Manager and how it integrates with other AWS services

DDos Attacks :
	- Understand what they are and some best practices to limit your exposure
	- Know some options to mitigate them using AWS services.

IDS / IPS :
	- Understand the difference between IDS and IPS
	- Know what AWS services can help with each
	- Understand the differences between CloudWatch and CloutTrail

Service Catalog:
	- Know that it allows users to deploy assets through inheriting rights
	- Understand how Service Catalog can work in a multi-account scenario


AWS Whitepapers on Security
https://aws.amazon.com/whitepapers/#security

Best Practices for Managing Security Operations on AWS
https://www.youtube.com/watch?v=gjrcoK8T3To

IAM Policy Ninja
https://www.youtube.com/watch?v=aISWoPf_XNE

Security Anti-Patterns: Mistakes to Avoid
https://www.youtube.com/watch?v=tzJmE_Jlas0

Architecting Security and Governance Across a Multi-Account Strategy
https://www.youtube.com/watch?v=71fD8Oenwxc




## Pro Tips
#######################

  - Know that Security will be front-of-mind for every client evaluating the
	  cloud ... bur rarely are there sound processes in place.
  - Acknowledge concerns and be ready with a process
	  (Cloud Adoption Framework)
  - Leverage assessments and checklists as illustrators of care and best-practice
  - Migrating to the cloud is often more secure than on-prem due to increased
	  transparency and visibility.
  - Speak of "levels" of risk on a continuum rather than absolute.
  - Consider AWS Certified Security Specialty or certification like CISSP




###################################################################################################
## Migrations
###################################################################################################


## Migrations  Strategies
#########################

Migration Strategy			Description 											Example
--------------------     ------------- 										------------
Re-Host										"Lift and Shift"								Move on-prem MySQL
													Simply move asset with          to EC2 Instance
													no change

Re-Platform								"Lift and Reshape"							Move on-prem MySQL
													Move assets but change					to RDS MySQL
													underlying platform

Re-Purchase 							"Drop and Shop" 								Migrate legacy on-prem
													Drop old and purchase new				CRM system to salesforce.com

Re-Architect 							Redesign application in 				Create a server-less
													a cloud-native manner						version of legacy app

Retire 										Get rid of apps which 					End of life the label
													are not needed.									printing app because not used

Retain 										"Do nothing option" 						Good news servers, you'll
													Decide to reevaluate at a				live to see another day.
													future date




Migration      						Effort 							Opportunity to
Strategy 								 (Time and Cost)			Optimize
--------------------     --------------- 			------------
Re-Host											**									*
Re-Platform									****								***
Re-Purchase									***									*
Re-Architect 								*****								*****
Retire 											<>									<>
Retain 											*										<>


## Cloud Adoption Framework
#############################

	- Business				- Platform
	- People					- Security
	- Governance			- Operations


Business:
	- Creation of a strong business case for cloud adoption
	- Business goals are congruent with cloud objectives
	- Ability to measure benefits (TCO, ROI)

People:
	- Evaluate org roles and structures, new skills and process needs
	  and identify gaps
	- Incentives and Career Management aligned with evolving roles
	- Training options appropriate for learning styles

Governance:
	- Portfolio Management geared for determining cloud eligibility and priority
	- Program and Project management more agile projects
	- Align KPI's with newly enabled business capabilities

Platform:
	- Resource provisioning can happen with standardization
	- Architecture patterns adjusted to leverage cloud-native
	- New application development skills and processes enable more agility

Security:
	- Identity and Access Management modes change
	- Logging and audit capabilities will evolve
	- Shared Responsibility Model removes some and adds some facets

Operations:
	- Service monitoring has potential to be highly automated
	- Performance management can scale as needed.
	- Business continuity and disaster recovery takes on new methods in the cloud.


## Hybrid Cloud Architectures
#############################

	- Hybrid Architectures make use of cloud resources along with on-premise
	  resources
	- Very common first step as a pilot for cloud migrations
	- Infrastructure can augment or simply be extensions of on-prem platfoms:
	     ex. VMWare
	- Ideally, integrations are loosely coupled


## Storage Gateway
	- creates bridge between on-prem and AWS (S3 Bucket <---> Cache)
	- Seamless to end-users
	- Common first step into the cloud due to low rist and appealing economics



                            +-----------------------------------+
                            |AWS +---------------------+        |
                            |    |        S3 Bucket    |        |
                            |    +---------------------+        |
                            +-----------------------------------+
                                            ^
																						|
      +---------------------+---------------+-----+---------------------+
			|											|											|											|
+-----+------+				+-----+------+				+-----+------+				+-----+------+
|            |				|            |				|            |				|            |
|   [cache]  |				|   [cache]  |				|   [cache]  |				|   [cache]  |
|            |				|            |				|            |				|            |
|            |				|            |				|            |				|            |
+------------+				+------------+				+------------+				+------------+
   Corporate							Remote							  Remote							  Remote
   HQ											Office								Office								Office

## Hybrid ERP
	- Middleware often a great way to leverage cloud services
	- Loosely-coupled, canonical-based

                            +-----------------------------------+
  +-----+------+				    |           +->  [EC2] --+          |	                          |AWS                                |
  |   [ERP]    |	          |           |            |          |
  |     |      |   -------->|[SQS]-->[Update]      [DynamoDB]   |
  |[Middleware]|---+        |        [Queue ]                   |
  |            |            |                                   |
  +------------+	          +-----------------------------------+
     Corporate


## Hybrid VMWare
	- Scale from on-prem to AWS when needed and tear down
	- VMware vCenter Plug-in allows transparent migration of VMs to/from AWS
	- VMWare Cloud furthers this concept with more public cloud-native features




## Migration Tools
#############################

  - Storage Migration
  - Server Migration Service
  - Database Migration Service
  - Application Discovery Service
  - AWS Migration Hub

## Storage Migration
  - AWS Storage Gateway
  - AWS Snowball

## Server Migration Service
  - Automates migration of on-premises VMware vSphere or
	  Microsoft Hyper-V / SCVMM virtual machines to AWS
  - Replicates VMs to AWS, syncing volumes and creating periodic AMIs
  - Minimizes cutover downtime by syncing VMs incrementally
  - Supports Windows and Linux VMs only (like AWS)
  - Server Migration Connector is downloaded as a virtual appliance into your
	  on-prem vSphere or Hyper-V setup.

## Database Migration Service
  - Data Migration Service (DMS) along with the Schema Conversion Tool (SCT)
	  helps customers migrate databases to AWS RDS or EC2-based databases
  - Schema Conversion Tool can copy db schemas for homogenous migrations and
	  convert schemas for heterogeneous migrations.
  - DMS is used for smaller, simpler conversions and supports MongoDB and DynamoDB
  - SCT used for larger, more complex datasets like data warehouses.
  - DMS has replication function for on-prem to AWS or to Snowball or S3.

   Corporate Data Center						AWS
  +---------------------+         +---------------------+
	|               [SCT] |	        |                     |
	|                 |   |    +--->|    [Redshift]       |
	| [data     ]     v   |    |    |                     |
	| [warehouse] ->[DMS] | ------->|    [Snowball]       |
	|                     |    |    |                     |
	|                     |    +--->|    [S3]             |
	|                     |         |                     |
  +---------------------+         +---------------------+

## DMS Supports
	Source Database 					Target Database on Amazon RDS
	----------------          --------------------------------
	Oracle Database 					Amazon Aurora, MySQL, PostgreSQL, Oracle
	Oracle Data Warehouse 		Amazon Redshift
	Azure SQL 								Amazon Aurora, MySQL, PostgreSQL
	Microsoft SQL Server 			Amazon Aurora, Amazon Redshift, MySQL, PostgreSQL
	Teradata 									Amazon Redshift
	IBM Netezza 							Amazon Redshift
	Greenplum 								Amazon Redshift
	HPE Vertica 							Amazon Redshift
	MySQL and MariaDB 				PostgreSQL
	PostgreSQL 								Amazon Aurora, MySQL
	Amazon Aurora 						PostgreSQL
	IBM DB2 LUW 							Amazon Aurora, MySQL, PostgreSQL
	Apache Cassandra 					Amazon DynamoDB


## Application Discovery Service
	- Gathers info about on-prem data centers to help in cloud migration planning
	- Collects config, usage and behavior data from servers to estimate TCO of
	   running on AWS
	- Can run as agent-less (VMWare env) or agent-based (non-VMWare env)
	- Only supports those OSes that AWS supports (Linux/Windows)
	- AWS Console > AWS Migration Hub



## Network Migration and Cutovers
##################################

## CIDR Reservations
	- Ensure your IP addresses will not overlap between VPC and on-prem
	- VPCs support IPv4 netmasks range from /16 to /28      **
	    /16 = 255.255.0.0     = 65,024 hosts
	    /28 = 255.255.255.240 =     16 hosts
	- 5 Ips are reserved in every VPB subnet (ex. 10.0.0.0/24)
	    10.0.0.0   = Network Address
	    10.0.0.1   = Reserved by AWS for VPC Router
	    10.0.0.2   = Reserved by AWS for Amazon DNS
	    10.0.0.3   = Reserved by AWS for future use
	    10.0.0.255 = VPC's don't support broadcast so AWS reserves this address

## Network Migrations
	- Most organizations start with a VPN connection to AWS
	- As usage grows, they might choose Direct Connect but keep VPN as backup
	- Transition from VPN to Direct connect can be seamless using BGP
	- Once Direct Connect is setup, configure both VPN and Direct Connect
	  within the same BGP prefix
	- From the AWS side, the Direct Connect path is always perferred.
	- Need to be sure the Direct Connect path is the preferred route your network
	  to AWS and not VPN (thru BGP weighting or static route)

## Amazon Snow Family
	- Evolution of Import / Export process
	- Move MASSIVE amounts of data to and from AWS
	- Data transfer as fast or slow as common carrier (UPS, DHL, FedEx)
	- Encrypted at rest


	AWS Import / Export				Ship external HD to AWS. AWS copies to S3
	AWS Snowball 							Ruggedized NAS in a box. Copy data up to 80TB **
	  												and ship back.  AWS copies to S3
	AWS Snowball Edge 				Snowball will onboard Lambda and clustering
															Can do processing on data before shipping back
	AWS Snowmobile 						Shipping container full of storage up to 100PB **
														Trucks back to datacenter and copied onto S3

## Migration Exam Tips
##################################

Migration Strategies:
	- Understand different strategies (Re-host, Re-Architect, Retire)
	- Understand trade-offs and benefits for each

Cloud Adoption Framework:
	- Know what a framework is and realistic expectations that accompany it.
	- Understand high-level components of Cloud Adoption Framework
			B P G P S O
	- Cloud adoption is only partially a tech effort

Hybrid Architectures:
	- Know typical hybrid architecturs that leverage on-prem and cloud assets:
			Storage Gateway, Hybrid ERP (messaging)
	- Know VMWare has tools for abstracting workloads across on-prem and cloud
	 		Import plug-in

Migrations:
	- Understand the different services / tools available for migrating servers,
	  storage and DB: Storage , Server, DB, Migration

Network Migration / Cutover:
	- Know various hybrid networking architectures
	- Understand transitions from / to VPN and Direct Connect can be done
	  using BGP routing. NOTE: abrupt route changes risk downtime



How to Assess Your Orgazniation Readiness to Migrate at scale to AWS
https://www.youtube.com/watch?v=id-PY0GBHXA

Migrating Databases and Data Warehouses to the Cloud
https://www.youtube.com/watch?v=Y33TviLMBFY

Deep Dive: Using Hybrid Storage with AWS Storage Gateway to Solve
On-Premise Storage Problems
https://www.youtube.com/watch?v=9wgaV70FeaM



## Migration Pro Tips
##################################

	- Tech is often a minor part of cloud migration project
			People, Process, Policies, External / Internal Influencers
	- Project management discipline is a must
	- Use Cloud Adoption Framework and alter for your company
	- Leverage Cloud Adoption Framework to get buy-in by acknowledging the
	  enterprise nature of cloud migrations.  Find and lean on "Champions"
	- Span Boundaries



###################################################################################################
## Architecting to Scale
###################################################################################################


## Concepts
##################################

## Architectural Patterns

Loosely Coupled Architecture:
	- Components can stand independently and require little or no knowledge
		of inner workings of other components

		- Layers of Abstraction
		- Permits more flexibility
		- Interchangeable components
		- More atomic functional units
		- Can scale components independently

NOTE: Can scale vertically / horizontally across components in a
      loosely coupled system


	Horizontal Scaling 												Vertical Scaling
	Add more instances as demand increases		Add more CPU/ RAM to existing instance
	No downtime required to scale up 					Requires restart to scale up / down
	Automatic using Auto-scaling Groups 			Would require scripting to automate
	Theoretically Unlimited 									Limited by instance sizes


## Auto-Scaling Groups
##################################

	- Automatically provides horizontal scaling
	- Triggered by an event or scaling action to launch / terminate instances
	- Availability, Cost and System Metrics can all factor into scaling
	- Scaling Options:
			- Maintain:  Keep a specific or minimum number of instances running
			- Manual  :  Use max, min or specific number of instances
			- Schedule:  Increase / decrease instances based on schedule
			- Dynamic:   Scale based on real-time metrics of the system

## Launch Configurations

	- Specify VPC and subnets for scaled instances
	- Attache to an ELB
	- Define a Health Check Grace Period
	- AMI
	- Instance
	- Define size of group to stay at initial size.
	- Use scaling policy which can be based from metrics
			- Avg CPU Utilization
			- Avg Network Bytes In / Out

## Scaling Type
Types						What														When
Maintain		maintain X instances						I need 3 instances always
Manual 			manually change capacity				Just manually add or remove instances
						via console or CLI
Scheduled 	Adjust min/max instances				Every Monday morning spin to 10
						based on specific times
Dynamic 		Scale in response to behavior 	When CPU util goes above 70%
						of elements in the environment   on current instances, scale up



## Scaling Policies
Target Tracking Policy
 	- Scale based on a predefined or custom metric in relation to target value
 	- "When CPU util goes above 70% on current instances, scale up"

Simple Scaling Policy
 	- Waits until health check and cool down period expires before evaluating need
 	- "Let's add new instaces slow and steady"

Step Scaling Policy
 	- Responds to scaling needs w/ more sophistication and logic
 	- "Add all instances !!"


## Scaling Cooldowns
 	- Configurable duration that gives scaling a change to "come up to speed"
		and absorb load
 	- Default cool down period is 300 seconds (5min) **
 	- Automatically applies to dynamic scaling and optionally to manual scaling
	  but not supported for scheduled scaling
 	- Can override default cool down via scaling-specific cool down.

## Health Check Grace Period
	- Amount of time to allow before instance is checked for it's health

	After scaling event happens, amount of time to wait before instance is checked
	for it's health



## Kinesis
##################################

## ACG Project
https://acloud.guru/series/acg-projects/view/107
https://github.com/ACloudGuru/Does-Twitter-Hate-Cats

## Kinesis
	- Collection of services for processing streams of data
	- Data is processed in "shards" - with each shard able to ingest 1000 recs / sec **
	- Default limit of 500 shards, but can request increase upto unlimited (?) **
	- Records consists of Partition Key, Sequence Number and Data Blob (up to 1MB) **
	- Think of as Transient Data Store - Default retention of 24 hr,
	  can be configured for up to 7 days. **

## Kinesis Video Streams

## Kinesis Data Streams
	- Ingest large quantity of data and process various ways
			- Kinesis Data Analytics
			- Spark on EMR
			- Custom code on EC2
			- Lambda

## Kinesis Firehose
	- Ingest large quantity of data and send to various landing spaces
			- S3
			- Redshift
			- Amazon Elasticsearch Service
			- Splunk

## Kinesis Data Analytics
	- Run standard SQL queries against data streams

## Kinesis Data Stream Key Concepts
	- More shards you have, more data throughput

                             +---------------------------------------+
                             |            Kinesis                    |
                             |   (Max 1000 writes/sec per Shard)     |
                             |      +--------------------+           |
-------------------------->  |      |     Shard 1        |           |-----> [Consumer App]
                             |      +--------------------+           |
 +------+ +------+ +------+  |      +--------------------+           |
 | Data | | Data | | Data |  |      |     Shard 2        |           |
 +------+ +------+ +------+  |      +--------------------+           |
                             |               .                       |
---------------------------> |               .                       |
                             |               .                       |
                             |      +--------------------+           |
                             |      |     Shard n        |           |-----> [Firehose ]
                             |      +--------------------+           |
                             |                                       |
                             +---------------------------------------+

NOTES:  Each shard given a partition key (128bit MD5 hash), unique to each shard
				Each piece of data in shard gets assigned sequence number
				Sequence numbers can be duplicated across shards
				Can use a sequeence number within a partition key to determine if data
				  newer than other data in that partition key
				Uniquely identify data w/ Partition Key and Shard

          +------------------------------------------------+
          |                    Kinesis                     |
          |                                                |
          |  +------------------------------------------+  |
          |  |                 Shard 1                  |  |
          |  |Partition Key: e55f   Partition Key: e55f |  |
          |  |Sequence No  : 1      Sequence No  : 2    |  |
          |  |Data: <data>          Data: <data>        |  |
          |  +------------------------------------------+  |
          |                                                |
          |  +------------------------------------------+  |
          |  |                 Shard 2                  |  |
          |  |Partition Key: 45ab   Partition Key: 45ab |  |
          |  |Sequence No  : 1      Sequence No  : 2    |  |
          |  |Data: <data>          Data: <data>        |  |
          |  +------------------------------------------+  |
          |                                                |
          +------------------------------------------------+


## Kinesis Stream and Fire Hose

[Twitter] -> [AWS SDK] -> [Kinesis Stream] -> [Kinesis Firehose] -> [S3 Bucket]
                                                                       |
                                                                       v
                                                                    [Lambda (unpack)]
                                                                       |
                                                                       v
                                                                    [Dynamo DB] <-----+
                                                                       |              |
                                                                       v              |
                                        [Amazon Comprehend] <--->[Lambda (sentiment)] +

## DynamoDB Scaling
####################
                     Throughput 											Read Capacity Units
    <---------------------------------------------->	Write Capacity Units
                          ^
													|
													|
								Size			|  - Max item size is 400KB
													|
													|
													|
                          v

## DynamoDB Terminology

	Partition:      A physical space where DynamoDB data is stored. 10 GB Chunks    **
	Partition Key:  A unique identifier for each record; also called a Hash Key
	Sort Key     :  In combo w/ partition key, optional second part of composite key
									that defines storage order, Sometimes called a Range Key
  - DynamoDB scales out by adding partitions

## Partition Calculation

	By Capacity : (Total RCU / 3000) + (Total WCU / 1000)					**
	By Size     : Total Size / 10GB																**
	Total Partitions:  Round Up for MAX of (By Capacity, By Size) **

ex. 		10GB Table, 2000 RCU and WCU
	By Capacity : (2000 Read RCU / 3000) + (2000 Write WCU / 2000)	**
									2000 / 3000  + 2000 / 1000
									0.66 + 2 = 2.66
	By Capacity : 10GB / 10GB
								  10 / 10 = 1
	Total Partitions:  MAX(2.66, 1) = 2.66 >> Round Up == 3

   [   Dynamo DB     ]
   [    Partition 1  ]
   [Hash 00xxx -FFxxx]


   [              Dynamo DB                ]  Increase RCU/WCU or 10GB
   [    Partition 1  ]   [    Partition 2  ]
   [Hash 00xxx -80xxx]   [Hash 00xxx -80xxx]

   [                        Dynamo DB       ]  Increase RCU/WCU or 20GB
   [    Partition 1  ]   [    Partition 2  ]   [    Partition 3  ]
   [Hash 00xxx -55xxx]   [Hash 56xxx -AAxxx]   [Hash ABxxx -FFxxx]

NOTE:  Need a partition key that has variability in it for data increase


ex. Sensor data over time:
Partition Key = Date and Sort Key = sensor_id >> Hot partition on data (not spreading writes)
Partition Key = Sensor ID and Sort Key = date >> Writes spread among partitions, and reads


## Auto Scaling for DynamoDB

        					Read Capacity											Write Capacity
Target Utilization       ___ %                           ___ %
Min provisioned capacity ___ Units                       ___ Units
Max provisioned capacity ___ Units                       ___ Units

                                 (3)
[Set Autoscaling]   <--- [SNS]  <---- [ Amazon     ]
(1) |                              +  [ CloudWatch ]
    |                        +             |
    |           (2)     +                  |  (4)
    |             +                        |
    |       +                              |
    |+                        (5)          v
 [DynamoDB] <-------UpdateTable------ [Application ]
                                      [Auto Scaling]

  - Using Target Tracking emthod to try to stay close to target utilization
  - Currently does not scale down if table's consumption drops to zero
  - Workaround 1: Send requests to the table until it auto scales down
  - Workaround 2: Manually reduce the max capacity to match min capacity
  - Also supports Global Secondary Indexes - think of them as a copy of table



## CloudFront Part II
######################

  - Can deliver content to users faster by caching static and dynamic content
	  at edge locations
  - Dynamic content delivery is achieved using HTTP cookies forwarded from your origin
  - Supports Adobe Flash Media Server's RTMP protocol but you have to choose
	  RTMP delivery method
  - Web distributions also support media streaming and live streaming but use
	  HTTP or HTTPS
  - Origins can be S3, EC2, ELB or another web server.
  - Multiple origins can be configured
  - Use Behaviors to configure serving up origin content based on URL paths.


## Origins and Behaviours
                                       wp-content/*
                                     +------------> [Static Content / S3 Bucket]
                                     | wp-includes/*
[Users] -> [Route53] -> [CloudFront] +
                                     |
                                     +------------->  [ELB] [ASG [EC2 fleet]]
                                      Default(*)
                                      wp-login.php
                                      wp-admin/*


## Invalidate CloudFront Cache / Invalidation Requests
	- Delete the file from the origin and wait for the TTL to expire
	- Use AWS Console to request invalidation for all content
	  or a specific path i.e. /images/*
	- Use the CloudFront API to submit an invalidation request
	- 3rd-Party tools to perform CloudFront invlalidation:
				- CloudBerry, Ylastic, CDN Planet, CloudFront Purge Tool

## Zone Apex Support
	- CloudFront Supports Zone Apex i.e ____________.example.com

## Geo-Restrictions
	- CloudFront Supports Geo-Restrictions

	Enable Geo-Restrictions:   Y / N
	Restriction Type:   [] Whitelist  [] Blacklist
  Countries:


## Amazon Simple Notification Service (SNS)
##############################################
  - Enables a Publish / Subscribe design pattern
  - Topics = A channel for publishing a notification
  - Subscription = Configuring an endpoint to receive messages
	                 published on topic
  - Endpoint protocols include HTTP(S), Email, SMS, SQS, Amazon Device Messaging
	          (push notification) and Lambda


                                     +--> [SES] --> [Thank You Email]
                                     |
                                     |
[Upload S3] -> [Event] -> [SNS] -> "Image Upload"  --> [SQS] -> + [Image Resize Queue]
																	[Topic]
                                     |
                                     |
                                     +--> [Lambda] -->  [Rekognition]

## Amazon Simple Queue Service (SQS)
####################################

 - Reliable, highly-scalable hosted messaging queueing service
 - Available integration with KMS for encrypted messaging
 - Transient storage - default 4 days, max 14 days	**
 - Optionally supports FIFO queue ordering
 - Maximum message size of 256KB but using special Java SQS SDK, can have
   messages as large as 2GB. (Does this by using pointers to S3)
 - Loosely Coupled

## Loosely Coupled Architecture

[ERP]	                                    (polling)            (update)
  |                                    +------------- [EC2] --------------+
  v                                    v                                  v
[Middleware]  ---------> [SQS] -> [Master Data ]                      [DynamoDB]
 Corp						   AWS            [Update Queue]

## Standard Queue vs FIFO Queue
	- Standard Queue does not guarantee order
	- FIFO maintains order messages were received
  NOTE: if message fails or gets stuck, it will hold up
	      all other messages behind



## Amazon MQ
#############
  - Manged implementation of Apache ActiveMQ (message broker)
  - Fully managed and highly available within a region
  - Supports ActiveMQ API and support for: JMS, NMS, MQTT, WebSockets
  - Designed as a drop-in replacement for on-prem message brokers
  - Use SQS if creating a new application from scratch
  - Use MQ if you want an easy path to migrate from existing message brokers to AWS


## Lambda
#############

	- Allows you to run code on-demand without need for infrastructure
	- Supports Node.js, Python, Java, Go, C#
	- Extremely useful option for creating serverless architectures
	- Code is stateless and executed on an event basis (SNS, SQS, S3, DynamoDB Streams, etc.)
	- No fundamental limits to scaling a function since AWS dynamically
	  allocates capacity in relation to events.

## Lambda Architecture



                                      +--> [Dead Letter Queue]
                                      |
                                      |
[Mobile Upload] -> [SQS] -> [Lambda ] +--> [Lambda: Resize] --> [S3]
                            [Image  ] |
                            [Receipt] +--> [Lambda: Extract Metadata] --> [DynamoDB]
                                      |
                                      +--> [Lambda: Send Thank You] -->  [SES

## Simple Workflow Service
###########################

	- Managed Status Tracker
	- Create distributed asynchronous systems as workflows
	- Supports both sequential and parallel processing
	- Tracks the state of you workflow which you interact
	  and update via API
	- Best suited for human-enabled workflows like order fulfillment
	  or procedural requests
	- AWS recommends new applications - look at Step Functions over SWF

	Made up of:
		- Activity Worker:  Program that ineracts with the SWF service to get
		  tasks, process tasks and return results
		- Decider :  program that controls coordination of tasks such as
		             ordering, concurrency, scheduling


[Activity ] <---API Calls--->	 [AWS SWF ]  <---API Calls--->	 [Decider ]
[Worker ]



## AWS Step Functions and Batch
###############################

	- Managed workflow and orchestration platform
	- Scalable and HA
	- Define your app as a state machine
	- Create tasks, sequential steps, parallel steps, branching paths or timers
	- Amazon State Language declarative JSON
	- Apps can interact and update via Step Function API,
	  direct integration with Lambda
	- Visual interface describes flow and realtime status
	- Detailed logs of each step execution

	- Utilizes a Finite State Machine

## Task Timer Example

	Start  -----> [Wait For Timestamp]  -----> [Send SNS Message] -----> End


## AWS Batch

	- Management tool for creating, managing and executing batch-oriented
	  tasks using EC2 instances.
			1. Create a Compute Environment:
						- Managed or Unmanaged
						- Spot or On-Demand
						- vCPUs
			2. Create a Job Queue with priority and assigned to Compute Environment
			3. Create a Job Definition:
						- Script or JSON
						- env variables
						- mount points
						- IAM role
						- container image, etc.
			4. Schedule the job

NOTE: Managed will scale out and tear down infrastructure


## Comparisons
													When													Use Case
Step Functions         Out-of-the-box coordination		Order Processing Flow
												AWS Service components

Simple Workflow         Need to support external 			Loan Application Process
Service									processes or specialized			w/ Manual Review Steps
       									execution logic
												(manual steps)

Simple Queue Service    Messaging Queue; Store and  	Image Resize Process
												forward patterns

AWS Batch 							Scheduled or reoccurring 			Rotate logs daily on
												tasks that don't require			firewall appliance
												heavy logic




## Elastic Map Reduce (EMR)
###############################
	- Collection of:
				Hadoop, Pig, Hive, Oozie, ZooKeeper, HBase, MapReduce, HDFS,
				fluem, sqoop, ambari


  [ ---------------- Ambari:   Management and Monitoring ---------------- ]
  [sqoop:        ]
  [data transfer ] [ZooKeeper] [Oozie:  ] [Pig:     ] [Hive: ] [Mahout:] [HBase:   ]
                   [Resource ] [Workflow] [Scripting] [SQL   ] [ML     ] [Col Store]
  [flume:        ] [Coord    ] [MapReduce: Distributed Processing    ]
  [log collection]						 [HDFS: Hadoop Distributed File System ]


	- Managed Hadoop framework for processing huge amounts of data
	- Also supports Apache Spark, HBase, Presto and Flink
	- Used for log analysis, financial analysis, ETL
	- A "Step" is a programatic task for performing some process on the data
	  i.e. word count
	- A Cluster is a collection of EC2 instances provisioned by EMR to run
	  your Steps.

														+----------+
														| Master   |
														| Node     |
														+----------+

	+----------+	+----------+        	+----------+   +----------+   +----------+
	| Core     |	| Core     |          |   Task   |   |   Task   |   |   Task   |
	| Node     |	| Node     |          |   Node   |   |   Node   |   |   Node   |
	| (HDFS)   |	| (HDFS)   |          |          |   |          |   |          |
	+----------+	+----------+        	+----------+   +----------+   +----------+


## Architecting to Scale: Exam Tips
###################################

Auto Scaling Groups:
	- Know the different scaling options (Maintain, Manual , Scheduled, Dynamic)
	  and policies (Target Tracking Policy,  Simple Scaling Policy,  Step Scaling Policy)
	- Understand the difference and limitations between horizontal
	   and vertical scaling
	- Know what a cool down periods is and how it might impact your
	   responsiveness to demand

Kinesis:
	- Data Streams and Firehose
	- Understand shard concept and how partition keys and sequences enabled
	  shards to manage data flow

Dynamo DB Autoscaling:
	- Know the new / old terminology and concept of
		 partition, partition key and sort key in the context of DynamoDB
	- Understand how DynamoDB calculates total partitions and allocates
     RCS and WCU across available partitions
	- Conceptually know how data is stored across partitions

CloudFront Part II:
	- Know that both static and dynamic content is supported
	- Understand possible origins and how multiple origins can be used
	   together with Behaviours
	- Know invalidation methods, zone apex, geo-restriction options

SNS:
	- Understand a loosely coupled architecture and benefits it brings
	- Know the differnt types of subscription endpoints supported
					HTTP(S), Email, SMS, SQS, Amazon Device Messaging, Lambda

SQS:
	- Know the difference between Standard and FIFO queues
	- Know the difference between a Pub/Sub (SNS) and Message Queue Architecture

Lambda:
	- Know what "serverless" is in concept and how Lambda can facilitate such
	   and architecture
	- Know the languages supported by Lambda

SWF:
	- Understand the difference and functions of a Worker and a Decider
	- Best suited for human-enabled workflows (manual steps, approvals)

Elastic Map Reduce:
	- Understand the parts of a Hadoop landscape
	- Know what a Cluser is and what Steps are
	- Understand the roles fo a Master Node, Core Nodes, and Task Nodes



Videos:
Scaling Up to your First 10 million users
https://www.youtube.com/watch?v=w95murBkYmU

Learn to Build a Cloud Scale WordPress Site that can
keeps up with Capacity Demands
https://www.youtube.com/watch?v=dPdac4LL884


Elastic Load Balancing Deep Dive and Best Practices
https://www.youtube.com/watch?v=9TwkMMogojY


## Architecting to Scale: Pro Tips
###################################

	- Elasticity will drive most benefit from the cloud

	- Think Cloud-First designs if you're in a Green Field scenario even if
	   deploying on-prem

	- If in a "Brown Field" situation, create roadmaps for cloud-first enablers
	  like distributed applications, federated data and SOA

	- Be careful to not let elasticity cover for poor development methods.

	- Microservice concepts help achieve scalability via decoupling,
     simplification and separation of concerns



###################################################################################################
## Business Continuity
###################################################################################################

## BC Concepts
#################

Business Continuity:
	- Seeks to minimize business activity disruption when something unexpected happens

Disaster Recovery:
	- Act of responding to an event that threatens business continuity

Fault Tolerance:
	- Designing in the ability to absorb problems without impacting service levels
	- "Ability to tolerate faults"

High Availability:
	- Designing in redundancies to reduce the chance of impacting service levels.

Service Level Agreement:
	- An agreed goal or target for a given service on its performance or availability.

Recovery Time Objective (RTO):
	- Time that it takes after a disruption to restore business processes to
	  their service levels.
		(T is for TIME)

Recovery Point Objective (RTO):
	- Acceptable amount of data loss measured in time
		(P is for data that goes "POOF")

                      +-----------------------------------+
                      |                                   |
                      +           DISASTER                V
 -----[backup]------[backup]---------X---------------[Recovered]-------->
                            <--------><--------------->
														data lost		recover time
                               RPO 		     RTO


## Disaster Categories

	Category													Example
Hardware Failure					Network switch power supply fails, brings down LAN
Deployment Failure				Deploy a patch that breaks key ERP business process
Load Induced							DDOS attack on website
Data Induced							Ariane 5 rocket explosion 6/4/1996 (64bit FB -> signed 16 bit)
Credentail Expiration			SSL / TLS certificate expiration
Dependency 								S3 subsystem failure caused numerous AWS service failures
Infrastructure 						Construction crew cuts fiber optic cable
Identifier Exhaustion		  "don't have sufficient capacity in AZ you requested"

Human error								truncate table invoices



## Disaster Recovery Architectures
##################################

## Backup & Restore
	Pros:
		- Very common entry point into AWS
		- Minimal effort to configure
	Cons:
		- Least flexibility
		- Analogous to off-site backup storage

## Pilot Light
	Pros:
		- Cost effective way to maintain a "hot site" concept
		- Suitable for a variety of landscapes and applications
	Cons:
		- Usually requires manual intervention for failover
		- Spinning up cloud environments will take minutes or hours
		- Must keep AMIs up-to-day with on-prem counterparts

## Warm Standby
	Pros:
		- All services are up and ready to accept a failover faster within
		  minutes or seconds
		- Can be used as a "shadow env" for testing / prod staging
	Cons:
		- Resources would need to be scaled to accept production load
		- Still requires some env adjustments but could be scripted

## Multi-Site
	Pros:
		- Ready all the time to take full production load
				- effectively a mirrored data center
		- Fails over in seconds or less
		- No or little intervention required to fail over
	Cons:
		- Most expensive DR option
		- Can be perceived as wasteful as you have resources idling until
		  primary failure


## Storage Options for HA / BC
##################################

## EBS Volumes
	- Annual Failure Rate less than 0.2% compared to commodity hardware at 4%.
	  (Out of 1000 EBS volumes, expect 2 to fail)
	- Availability target of 99.999%
	- Replicated automatically within a single AZ
	- Vulnerable to AZ failure
	- Easy to snapshot, which is stored on S3 and multi-AZ durable
	- Can copy snapshots to other regions as well
	- Supports RAID configurations

								RAID 0				RAID 1				RAID 5				RAID 6
Redundancy			None					1 drv fail  	1 drv fail 		2 drv can fail
Reads						****			 		***						****					****
Writes					****			 		***						**			  		*
Capacity				100%					50%						(n-1)/n				(n-2)/n

n=number of drives

RAID 0 - single disk
RAID 1 - mirror disk (2 drives)
RAID 5 - 3 drives, write on 2, parity bit on 1
RAID 6 - 3 drives, write on 2, 2 types of parity on 2 drives


NOTE: AWS DOES NOT RECOMMEND RAID 5 or RAID 6 because parity bits writes
      consume IOPS

						Volume			Provisioned		Total Volume		Usable
RAID				Size					IOPS					IOPS					Space			Throughput
No RAID			1- 1000 GB		4000					4000					1000 GB			500 MB/s
RAID 0			2- 500 GB			4000					8000					1000 GB			1000 MB
RAID 1			2- 500 GB			4000					4000					1000 GB			500 MB/s


## S3 Storage

Classic									Availability					Unavailable
Standard Storage					99.99%								52.6 min / yr
Standard Infrequent				99.9%									8.76 hr / yr
One-Zone Infrequent				99.5%									1.83 days / yr

	- Durability = Eleven 9s  99.999999999%
	- Standard and Standard-IA have multi-AZ durability
	- One-zone has single AZ durability
	- Backing service for EBS snapshots and many other services



## EFS
	- Implementation of NFS
	- True file system as opposed to block storage (EBS)
		or object storage (S3)
	- File locking, strong consistency, concurrently accessible
	- Each file object and metadata is stored across multiple AZs
	- Can be accessed from all AZs concurrently
	- Mount targets are highly available

## Amazon Storage Gateway
	- Good way to migrate on-prem data to AWS for offsite backup
	- Best for continuous sync needs

## Snowball
	- Various options for migrating data to AWS based on volume
	- Only for batch transfers of data

## Glacier
	- Safe offsite archive storage
	- Long-term storage with rare retrieval needs.


## Compute Options for HA / BC
##################################

## HA Approaches for Compute
		- Up to date AMIs are critical for rapid fail-over
		- AMIs can be copied to other regions for safety or DR staging
		- Horizontally scalable architectures preferred because risk
		  spread across multiple smaller machines vs. 1 large machine
		- Reserved instances only way to GUARANTEE that resources will be
		  available when needed
		- Auto Scaling and Elastic Load Balancing work together to provide
		  automated recovery by maintaining minimum instances
		- Route 53 Health Checks provide for "self-healing" redirection of traffic


## Database Options for HA / BC
##################################

## HA Approaches for Databases
	- Choose DynamoDB over RDS because of inherent fault tolerance.
	- If DynamoDB can't be used, use Aurora because of redundance and
	  automatic recovery features.
	- If Aurora can't be used, choose Mult-AZ RDS.
	- Frequent RDS snapshots can protect against data corruption or failures
	  and they won't impact performance of a multi-AZ deployment.
	- Regional replication is an option but will not be strongly consistent.
	- Database on EC2, design HA yourself

## HA Notes for Redshift
	- Currently does not support multi-AZ deployments.
	- Best HA option is to use a multi-node cluster which support data
	  replication and node recovery
	- A single node Redshift cluster does not support data replication,
	  have to restore from a snapshot on S3 if drive fails.


## HA Notes for ElastiCache
##################################

Memcached
	- Because Memcached does not support replication, a node failure
	  will result in data loss.
	- Use multiple nodes in each shard to minimize data loss on node failure
	- Launch multiple nodes across available AZs to minimize data loss on AZ failure

Redis
	- Use multiple nodes in each shard and distribute the nodes across multiple AZs
	- Enable multi-AZ on the replication group to permit automatic failover if the
	  primary node fails.
	- Schedule regular backups of your Redis cluster.


## HA Approaches for Networking
##################################

	- Create subnets in available AZs, you create multi-AZ presence for you VPC
	- Best practice is to create at least two VPN tunnels into your
	  Virtual Private Gateway
	- Direct Connect is not HA by default, so you need to establish a second
	  connection via another Direct Connect (ideally with another provider) or
		use a VPN.
	- Route 53 Health Checks provide basic level of redirecting DNS resolution
	- Elastic IPs allow you flexibility to change out backing assets without
	  impacting name resolution.
	- For multi-AZ redundancy of NAT GW, create gateways in each AZ with routes
	  for private subnets to use the local GW.

## Exam Tips
##################################

## General Concepts
	- Know the difference between BC, DR and Service Levels
	- Know the difference between High Availability and Fault Tolerance
	- Understand the inter-relationships and how AWS uses the terms
	- Know the difference between RTO and RPO
	- Know the four general types for DR architectures and trade-offs

## Storage Options
	- Understand the HA capabilities and limitations of AWS storage options
	- Know when to use each storage option to achieve the required level
	  of recovery capability
	- Understand RAID and the potential benefits and limitations

## Compute Options
	- Understand why horizontal scaling is preferred from an HA perspective
	- Know that compute resources are finite in an AZ and how to gurantee their
	  availability
	- Understand how Auto Scaling and ELB can contribute to HA

## Database Options
	- Know the HA attributes of the various Database services
	- Understand the different HA approaches and risks for Memcached and Redis
	- Know which RDS options require manual failover and which are automatic
	 	(Primary vs. Seconary vs. Read Replica)

## Network Options
	- Know which networking components are not redundant across AZs and how to
	  architect for them to be redundant
	- Understand the capabilities of Route 53 and Elastic IP in context


Videos:

Models of Availability
https://www.youtube.com/watch?v=xc_PZ5OPXcc

How to Design a Multi-Region Active-Active Architecture
https://www.youtube.com/watch?v=RMrfzR4zyM4

Disaster Recovery with AWS: Tiered approaches to balance
cost with recovery objectives
https://www.youtube.com/watch?v=a7EMou07hRc



## Pro Tips
##################################


## Failure Mode and Effects Analysis (FMEA)
	Systematic process to examine:
		- What could go wrong
		- What impact it might have
		- What is likelihood of it occuring
		- What is our ability to detect and react

	Risk Priority Number = Severity * Probability * Detection

## FMEA Across Disaster Categories

        							Customer									Detect and			Risk Priority
Category							Impact			Likelihood 		React						Number
HW Failure							9							5							2							90
Deploy Failure					9							1							2							18
Load Induced						5							5							2							50
Data Induced						6							1							6							36
Credential Expire				7							6							7						 294
Dependency							7							7							2							98
Infrastructure					8							5							9						 360
Identifier Exhaustion 	2							2							2							 8




###################################################################################################
## Deployment and  Operations Management
###################################################################################################


## Types of Deployments
########################


Software Deployments:
	- Big Bang
	- Phased Roll-out
	- Parallel Adoption

Rolling Deployment:
	- Create new Launch Configuration with updated AMI (per Auto Scaling Group)
	- Start terminating old ECS instances
NOTE: Old instances terminated and new/updated ones spun up in their place

A/B Testing:
	- Have Route 53 send small percent of traffic to load balancer w/ new instances
	- Eventually shift over all traffic to new instances

Canary Release:
	- Deploy an instance of new version to production
	- Check and then deploy to rest of instances

Blue/Green Deployment:
	- ELB pointing to old version (Blue)
	- ELB pointing to new version (Green)
	- Have Route 53 switch over from Blue to Green (and potentially back)
NOTE: Benefit is infrastructure is immutable, you just switch to correct
      new version.

Blue/Green Methods:
	- Update DNS w/ Route 53 to point to new ELB or instance
	- Swap Auto-Scaling Group already primed with new version behind ELB
	- Change Auto-Scaling Group Launch Configuration to use new AMI version and
	  terminate old instances.
	- Swap environment URL of Elastic Beanstalk
	- Clone stack in AWS OpsWOrks and update DNS

Blue/Green Contraindications (Anti-Patterns):
	- Data store schema is too tightly coupled to the code changes
	- Upgrade requires special upgrade routines to be run during deployment
	- Off-the-shelf products might not be blue-green friendly



## Continuous Integration / Continuous Deployment
#################################################

Continuous Integration:
	- Merge code change back to main branch frequently w/ automated testing

Continuous Delivery:
	- Automated release process can deploy at click of button

Continuous Deployment:
	- Each code change that passes all stages of the release process is
	  released to production with no human intervention

CI/CD Considerations:
	- Objective is to create smaller, incremental and compartmentalized
	  improvements and features
	- Lowers deployment risk and tries to limit negative impact
	- Test Automation must be SOLID
	- Feature toggle patterns useful for dealing w/ in-progress features not
	  ready for release vs. branching.
			i.e.  new feature is kept off via switch or config but can be deployed
	- Microservice architectures lend themselves well to CI/CD practices

AWS Development Lifecycle Tools:
	CodeCommit:   hosted git repo
	CodeBuild:    compile code, run tests and create packages
	CodeDeploy:   can deploy packages to EC2, Lambda, ElasticBeanStalk, ECS, on prem
	CodePipeline: Orchestration of commit / build / deploy
	X-Ray : Debugging of distributed / serverless applications
	CodeStar: Template service around CodeCommit / CodeBuild / CodeDeploy / CodePipeline



## Elastic Beanstalk
####################

	- Orchestration service to make push-button easy to deploy scalable web landscapes
	- Wide range of supported platforms from Docker, PHP, Java, Node.js
	- Multiple environments within Application (DEV, QA, PROD)
	- Great for ease of deployments
			- not great if you need control / flexibility



											[Ver 1] [Ver 2]
Your App Code					[Application Version]

Instance, Web Server, [Dev] [QA] [Prd]
Monitoring, Scaling		[ Environment ]

Management Layer:			[Application]

Elastic Beanstalk Deployment Options:
 - All At Once
 - Rolling
 -  Rolling w/ Additional Batch
 - Immutable
 - Blue / Green




## CloudFormation
####################

	- Infrastructure as Code
	- Use JSON or YAML, model and provision entire environments
	- Repeatable, automatic deployments and rollbacks
	- Nest common components for reusability
	- Supports over 300 Resource Types
	- Supports custom resources via SNS or Lambda

CloudFormation Concepts:
	Templates  : JSON / YAML file that contains instructions to build out environment
	Stacks     : Entire environment described by template.
						   Created, updated and deleted as single unit
	Change Sets: Summary of proposed changes to your shack that allows you to see
							 how those changes might impact your existing resources before
							 implementing them.

Resources section of template only thing that is needed.

# Stack Policies
	- Protect specific resources within your stack from being
	  unintentionally deleted or updated
	- Add a Stack Policy via the console or CLI when creating stack
	- Adding a Stack Policy to an existing stack can only be done via CLI
	- Once applied, a Stack Policy cannot be removed but it can be modified via CLI
ex.
{
  "Statement" : [
		{
			"Effect" 	:	"Allow",
			"Action" 	:	"Update:*",
			"Principal" 	:	"*",
			"Resource" 	:	"*"
		},
		{
			"Effect" 	:	"Deny",
			"Action" 	:	"Update:*",
			"Principal" 	:	"*",
			"Resource" 	:	"LogicalResourceId/ProductionDatabase"
		}
	]
}

NOTE: Stack Policy does not allow updates to Production DB
NOTE: By default Stack Policy protect everything, hence Allow statement first

# CloudFormation Best Practices:
  - AWS provides python "helper scripts" which can help you install software
	  and start services on your EC2 instances
  - Use CloudFormation to make changes to env rather than going directly to resources
  - Make use of Change sets to identify potential trouble spots in updates
  - Use Stack Policies to explicitly protect sensitive portions of your stack
  - Use verion control system i.e. GitHub to track changes to templates


## Elastic Container Service
############################

	- Elastic Container Service  (ECS)
	- Elastic Kubernetes Service (EKS)


		ECS  																					EKS
           Managed HA, sclable contianer platform

AWS specific platform for Docker							Compatible w/ upstreak K8s can be
																							lift and shift from other K8s

Simpler to learn / use 												Feature rich w/ steep learning curve

Leverages Route 53, ALB, CloudWatch 					Hosted K8s platform that handles
																							many things internally

Tasks are instances of containers 						Pods are containers collocated with one
that run on compute but are isolated					another can can have shared access
																							to each other

Limited extensibility 												Extensible via 3rd party and add-ons



# ECS Launch Types

		EC2  																					Fargate
You explicitly provision EC2 instances 				Control plane asks for resources and
																							Fargate automatically provisions

Responsible for upgrading, patching 					Fargate provisions compute as needed
care of EC2 pool

Must handle cluster optimization 							Fargate handles cluster optimization

granular control over infrastructure					Limited control, infra automated


## API Gateway
############################

	- Manged, high availability service to front-end REST APIs
	- Backed w/ custom code via Lambda, as a proxy for another AWS Service or
	  any other HTTP API on AWS or elsewhere
	- Regionally based, private or edge optimized (deployed via CloudFront)
	- Support API Keys and Usage Plans for user id, throttling and quota maangement.
	- Uses CloudFront behind the scenes and custom domains and SNI is supported
	- Can be published as products and montetized on AWS Marketplace

NOTE: API Gateway can cache responses


## Management Tools
############################

# AWS Config
  - Allows you to assess, audit and evaluate configurations of your AWS resources
  - Useful for Configuration Management as part of ITIL program
  - Creates a baseline of various configuration settings and files which can
	  track variations against the baseline.
  - AWS Config Rules can check resources for certain desired conditions and
	  violations are flagged as non-compliant

Config Rules ex.
	- Is Backup enabled on RDS
	- Is CloudTrail enabled on the AWS account
	- Are EBS volumes encrypted


# AWS OpsWorks
	- Managed instance of Chef and Puppet
	- Provide config management to deploy code, automate tasks, config instances ...
	- Three offerings:
			- OpsWOrks for Chef Automate:      Fully managed Chef
			- OpsWOrks for Puppet Enterprise:  Fully managed Puppet
			- OpsWOrks Stacks :  Uses embedded Chef solo client installed on EC2
			                     instances to run Chef recipes
		- OpsWOrks Stacks support EC2 instances and on-prem servers w/ agent

	- Stacks are collections of resources needed to support a service or application
	- Layers represent different components of application delivery hierarchy
	- EC2 instances, RDS instances and ELBs are examples of Layers
	- Stacks can be cloned - only within same region
	- Though OpsWorks is Global Services, can create a stack to a particular region
	  and can only control resources in that region.
			ex.
					Cant manage EC2 in EU-CENTRAL-1 from OpsWOrks in US-EAST-2









.
