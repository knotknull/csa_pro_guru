
###################################################################################################
##
##  AWS Certified Solutions Architect Professional
##  https://learn.acloud.guru/course/aws-certified-solutions-architect-professional-2019/dashboard
##
###################################################################################################


## Intro

Followup by taking AWS Certification Preparation Guide

###################################################################################################
## Data Stores
###################################################################################################


## Concepts
#############


## Persistent Datastore
Data is durable after reboots, restarts, powercycles
	- Glacier
	- RDS

## Transient Datastore
Data is temporarily stored and passed along to another process / persistent store
	- SQS
	- SNS

## Ephemeral Datastore
Data is lost when stopped
	- EC2
	- Memcached

## IOPS vs Throughput

Input/Output Operations per Second (IOPS)
  Measure how fast we can read and write to a device

Throughput
  How much data can be moved at a time



## Consistency Models: ACID & BASE
Atomic		All or nothing
Consistent	Must be valid
Isolated	Transactions can't interfere
Durable		Completed transaction stays around

Basic Availability	values availability even if state
Soft-state		might not be instantly consistent across stores
Eventually Consistent	will achieve consistency at some point


## S3
#############

S3 is an Object Store
 - used in other AWS services

  ** Maximum object size is 5TB
  ** Largest object in a single PUT is 5GB
  NOTE: Use multi-part uploads if larger than 100MB

s3://bucket/finance/april/invoice_1234.pdf = a Key, NOT A FILEPATH

## S3 Consistency

Documentation																Real world
--------------------------- 								--------------------------------
S3 provides read-after-write 								Write it and read it immediately
consistency for PUTS of new objects

HEAD or GET requests of the key before      Respond with "never seen it" until
an object exists will result in eventual    I completely write new object and
consistency																	fully replicate it.

S3 offers eventual consistency for 					Update or delete completely locally,
overwrite PUTS and DELETES									then replicate elsewhere. Until then
																						serve up the current file

Updates to a single key are atomic					Only one person can update this object,
 																						if two requests, process in order of
																						timestamp.  Updates seen as soon as
																						replication is done elsewhere.



## S3 Security

	- Resource-based (Object ACL, Bucket policy)
	- User-based  (IAM Policies)
	- Optional Multi-factor Authentication before delete

	----------------------------
  |  Is your user account    |---------  NO
  |  allowed to access me?   |
	----------------------------
            |
            | yes
	----------------------------
  |  Does the bucket policy  |---------  NO
  |  allow access to you     |
	----------------------------
            |
            | yes
	----------------------------
  |  Does the object ACL      |---------  NO
  |  allow you access to it   |
	----------------------------
            |
            | yes
		-------------------
    |    Access it    |
		-------------------


## S3 Versioning
	- New version with each write
	- Enables "roll-back" and "un-delete" capabilities
	- Old versions count as billable size until they are permanently deleted
	- Integrated w/ Lifecycle Management

## S3 Data Protection
	- Optionally require Multi-factor Authentication:
		- Safeguard against accidental deletion of an object
		- Change the versioning state of your bucket

	- Cross region replication
		- Security
		- Compliance
		- Latency

## S3 Lifecycle Management
		- Optimize storage costs
		- Adhere to data retention policies
		- keep S3 volumes well-maintained

## S3 Analytics

Data Lake Concepts									Athena, Redshift Spectrum, QuickSight
IoT Streaming Data Repo							Kinesis Firehose
Machine Learning & AI storage				Rekognition, Lex, MXNet
Storage Class Analysis 							S3 Management Analytics


## S3 Encryption at Rest

	Encryption Optional								Meaning
 ---------------------							--------------------
 SS3-S3															Use S3's existing encryption key for AES-256
 SS3-C															Upload your own AES-256 encryption key which
 																		S3 will use when it writes the objects.
 SS3-KMS														Use a key generated and managed by AWS Key
 																		Management Service
 Client-Side 												Encrypt objects using your own local encryption
                                    process before uploading to S3 (PGP, GPG, etc.)


## S3 Tricks

Transfer Accelerations						Speed up data uploads using CloudFront in reverse

Requestor Pays 										The requestor rather than the bucket owner
																	pays for requests and data transfer.

Tags 															Assign tags to objects for use in costing,
                                  billing, security, etc.

Events 														Trigger notifications to SNS, SQS or Lambda
																	when certain events happen in your bucket

Static Web Hosting 								Simple and massively scalable static website hosting

BitTorrent 												Use the BitTorrent protocol to retrieve any
																	publicly available object by automatically
																	generating a .torrent file.


## Glacier
#############

	- Cheap, slow to respond, seldom accessed
	- "Cold Storage"
	- Used by AWS Storage Gateway Virtual Tape Library
	- Integrated with AWS s3 via Lifecycle Management
	- Faster retrieval speed options if you pay more



                               +---------+  - File, zip, tar, etc
          +-------------+      | Archive |  - Max size 40TB
          |             |      +---------+  - Immutable
          |             | <---------+
[IAM]     |   Glacier   |
  access  |   Vault     |       +--------+
  +-----> |             |       |        |  - Different than vault access policy
          +-------------+       | Glacier|  - Enforce rules like no deletes or MFA
                  ^             | Vault  |  - Immutable
                  |             | Lock   |
                  |             +--------+
                  +---------------+
                      Policy


  Glacier Vault like S3 bucket
  Glacier Archive like an S3 object
	Policy: rules for that Glacier Vault (no delete or use MFA)
	Access done via IAM


	Create a Glacier Vault Lock then Initiate a vault lock
				- 24 hours to confirm vault lock
				- After 24 hours and is not confirmed: vault lock aborted
				- Complete vault lock within 24 hours: applies vault lock permanently



## Elastic Block Storage
##########################

	- "virtual hard drives"
	- Can only be used with EC2
	- Tied to a single AZ
	- Variety of Optimized choices for IOPS, throughtput and cost
	- Snapshots!!

	Instance Store vs. EBS:
			- Instance Store is temporary, only available when EC2 is running
			- ideal for caches, buffers, work areas
			- data goes away when EC2 is stopped or terminated
			- locked to that EC2
			- EBS not locked to EC2
			- EBS can create snapshot
			- Instance store is "attached"
			- EBS over network

EBS Snapshots
	- cost-effective and easy backup
	- share data sets with other users or accounts
					- share the snapshot and user can create a volume from it
	- Migrate a system to a new AZ or Region
			REMEMBER: EBS tied to a single AZ, snapshots allow you to migrate
	- convert unencrypted volume to an encrypted volume
					- create EBS from volume and check encrypt check box



	First snapshot stores the entire block store
	Subsequent snapshots store just the delta (but also contain the base)
	If you delete 1st snapshot and

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     |   | 1 | O |   |   |	 	== Snapshot 1
     |---|---|---|---|---|
     |   | 0 | 1 |   |   |
     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|

add two pieces of in and Snapshot 2 looks like this

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 1 |   |   |   |   |	 	== Snapshot 2
     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 0 |   |   |   |   |
     |---|---|---|---|---|

restoring from snapshot 2 will give you

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 1 | 1 | 0 |   |   |	 	== Restored Snapshot 2
     |---|---|---|---|---|
     |   | 0 | 1 |   |   |
     |---|---|---|---|---|
     | 0 |   |   |   |   |
     |---|---|---|---|---|

add 1 piece and delete 1 piece of data Snapshot 3 looks like this

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     |   |   |   |   |   |	 	== Snapshot 3
     |---|---|---|---|---|
     |   |   |   | 1 |   |
     |---|---|---|---|---|
     | X |   |   |   |   |
     |---|---|---|---|---|

restoring from snapshot 3 will give you

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 1 | 1 | 0 |   |   |	 	== Restored Snapshot 3
     |---|---|---|---|---|
     |   | 0 | 1 | 1 |   |
     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|

REMEMBER:
	- FIRST snapshot gets charged for the full EBS size
	- All other snapshots after 1st get charged for JUST THE DELTA of storage
	- If delete intermediate snapshots you can restore a later snapshot
	- If delete FIRST snapshot, can restore later snapshots

THINK Snapshots as collection of pointers to data.
		- Pointers pulled forward to next most recent snap


## Elastic File Service
##########################

	- implementation of NFS file share
	- elastic storage capacity, and pay for only what you use (unlike EBS)
	- EFS 3x expensive as EBS,  20x expensive as S3
	- Multi-AZ metadata and data storage
	- Configure mount-points in one or many AZs
			- EC2 can mount local to their AZ
	- Can be mounted from on-premises systems ONLY if using Direct Connect
	- Alternatively, use EFS File Sync agent
				- load on premise and syncronize to EFS

	- EFS supports MOST features of NFS V4 BUT NOT ALL


+---------------------------------------------------+
| AWS                                               |
| +--------------------------------+                |
| |                      US-East-1 |                |
| | +-----+                        |                |
| | | web +-----------+            |                |
| | +-----+           |            |                |
| |                   vMount Point]|    +------+    |
| | +-----+            ^      +    |    |      |    |
| | | web +------------+      +-------->+ EFS  |    |
| | +-----+                        |    |      |    |
| |                                |    |      |    |
| +--------------------------------+    +---^--+    |
|                                           |       |
| +--------------------------------+        |       |
| |                      US-East-2 |        |       |
| | +-----+                        |        |       |
| | | web ++                       |        |       |
| | +----------------v[Mount Point]|        |       |
| |        +--------->      +---------------+       |
| | +------+                       |                |
| | | web ++                       |                |
| | +-----+                        |                |
| +--------------------------------+                |
+---------------------------------------------------+




## Amazon Storage Gateway
##########################

 - Virtual macine that you run on-premises with VMWare or HyperV
 		- Can also run on EC2 instances
 - Provides local storage resources backed by AWS S3 and Glacier
 - Often used in DR preparedness to sync to AWS
 - Useful in cloud migrations


New Name 		  	Old Name					Interface						Function
-----------   	---------------   ---------------     --------------
File Gateway		None 							NFS, SMB					Allow on-prem or EC2 instances
																									  to store objects in S3 via
																										NFS or SMB mount point

Volume Gateway	Gateway-stored 		iSCSI						Async replication of on prem data to s3
Stored Mode			volumes

Volume Gateway	Gateway-cache			iSCSI						Primary Data stored in S3 with
Cached Mode			volumes														frequently access data cached locally on-prem

Tape Gateway	Gateway-Virtual			iSCSI						Virtual media changer and tape library
         			Tape Library												for use with existing backup software


## Amazon WorkDocs
##########################
		(like dropbox)
	- Secure, fully managed file collaboration service
	- Can integrate with AD for SSO
	- HIPPA, PCI DSS and ISO compliance requirements
	- Available SDK for creating complementary apps


## Database on EC2
##########################
	- Run any database with full control  / flexibility
	- Must manage everything like backups, redundancy, patching, scale
	- Good option if you require a db not yet supported by RDS (i.e. DB2, SAP HANA)



## Amazon RDS
##########################

	- Managed database option for MySQL, Maria, PostgreSQL, SQL Server,
		Oracle and MySQL-compatible Aurora
	- Best for structured, relational data store needs
	- drop-in replacement for existing on-prem instances
	- Automated backups and patching in customer-defined maintenance windows
	- Push-button scaling, replication and redundancy

## RDS Anti-Patterns

	If you need ...										Don't use RDS, use this instead
	-----------------									-----------------------
	Lots of BLOB												S3
	Automated scalability 							DynamoDB
	Name / Value Data Structure 				DynamoDB
	Data not well stuctured 						DynamoDB
	Other DB (DB2, etc.)								EC2
	Complete control over db 						EC2


Multi-AZ RDS
	- Read-Replicas service regional users

NOTE for MySQL: non-transactional storage engines like MyISAM don't support
                replication; you muse use InnoDB (or XtraDB on Maria)

MariaDB is an open-source fork of MySQL.

	NOTE:  Sync replication to Standby
	       Aync replication to Read replica
---------------------------------------------------
| us-west-2																				|
|  ------------  	sync				------------				|
|  | Maria DB |		replication	| Maria DB |				|
|  | Master   |  	-------->		| Standby  |				|
|  ------------  							------------				|
|   us-west-2a   							us-west-2a					|
|				| 																				|
|				| 																			  |
--------|------------------------------------------
				|
				--------------------------
			                           |
---------------------------------|------
| eu-central-1									 |		 |
|  ------------  	async				   |     |
|  | Maria DB |		replication	   |     |
|  | Read     | <-----------------	   |
|  | Replica  |  	                     |
|  ------------  						           |
|   eu-central-1a   							     |
|																			 |
----------------------------------------

	- 1 AZ Fails
		- Stand-by in another AZ assumes role of master
		- Read replicas keep on working


	- if entire region fails
		- Read Replica promoted to Stand-Alone (Single-AZ)
		- Single-AZ reconfigured to Mult-AZ




## Amazon DynamoDB
##########################

	- Managed, multi-AZ NoSQL data store with Cross-Region Replication option
	- Defaults to eventual consistency reads but can request strongly consistent
	  read via SDK parameter
	- Priced on throughput, rather than compute
	- Provision read and write capacity in anticipation of need.
	- Autoscale capacity adjusts per configured min/max levels.
	- On-Demand Capacity for flexible capacity at a small premium cost.
	- Achieve ACID compliance with DynamoDB Transactions


	Relational vs. NoSQL

	relational : structured
	NoSQL : name / value pairs


	Partition Key ==>> Primary Key (Internal Hash)
	MUST BE UNIQUE
  Can access via key

	Composite Primary Key:  partition key + sort key i.e. OrderNum + timestamp
	Can have multiple instances of Partition Key but sort key MUST BE DIFFERENT

## Secondary Indexes

Index Type					Description									How to distinguish
-----------------   --------------------				------------------------
Global Secondary     Partition and sortkey can		I'm not restricted to partitioning
Index								 be different from those     of partition key.  I'm GLOBAL
										 on table

Local Secondary      Same partition as the table 	I have to stay local and respect
Index								 but different sort key 			table partition key but I can
																									choose sort key.

- ** Max 5 local and 5 global secondary indexes
- ** Max 20 attributes across all indexes
- Indexes take up storage space




## When to use Secondary Indexes

Index Type					Description									    Example
-----------------   --------------------				    ------------------------
Global Secondary     When you want a fast query			Query Sales Orders by Customer #
Index								 of attributes outside the      rather Sales Order $
										 primary key - without having
										 to do a table scan

Local Secondary      When you already know the 			I have Sales ORder #
Index								 partition key and want to      but I want to retrieve records
										 quicky query on another        with a certain Material #
										 attribute


## Attribute Projections
	- when creating an index, need to select which attributes are projected onto
	  that index
	- secondary index like a view

	Projection:
		- customerNum (key)
		  - customerName
		  - customerAddr1
		  - salesOrderNum
		  - timestamp


## Secondary index use cases

If you need to 						Consider				  		Cost						Benefit
-------------- 						--------				  		-----						---------
access just a few					Projecting just       Minimal					Lowest possible latency
attributes the fastest    those few attr												access for non-key items
way possible              in a global 2nd idx


frequently access some 		Projecting those      Moderate;				Lowest possible latency
non-key attributes        attr in a global			offset table		access for non-key items
													secondary index				scans


frequently access most 		Projecting those      Up to Double		Maximum flexibility
non-key attributes        attr or even entire
													table in global
													secondary index

rarely query but write 		Projecting keys only   Minimal 				Very fast write or
or update frequently 			for the global 												updates for non-partition
													secondary index 											key items.


## Amazon Redshift
##########################

	- Fully managed, clustered peta-byte scale data warehouse

	- Extremely cost-effective as compared to some other on-premise
	  data warehouse platforms

	- PostgreSQL compatible with JDBC and ODBC drivers available;
	  compatible with most BI tools out of the box

	- Features parallel processing an columnar data stores which are
	  optimized for complex queries.

Redshift Spectrum:  option to query directly from data files on S3



## Data Lake
	- Large repository of data
	- Place tech on top to make use i.e.  ML / Analytics etc.
			- Query raw data without extensive pre-processing
			- Lessen time from data collection to data value
			- Identify correlations between disparate data sets



## Amazon Neptune
##########################
	- Fully managed graph database
	- Supports open graph APIs for both Gremlin and SPARQL

https://aws.amazon.com/neptune




## Amazon Elasticache
##########################

	- Fully managed implementations of two popular in-memory data stores:
			- Redis
			- Memcached
	- Push-button scalability for memory, writes and reads
	- In Memory key/value store - not "traditionally persistent"
	- Billed by node size and hourse of use

   Use												Benefit
   ----												----------
Web Session Store					store web session info in Redis so session info not lost
													if web server goes down

Database Caching 					Use Memcached in front of AWS RDS to cache popular queries
                          to offload work from RDS and return results faster to users

Leaderboards 							Use Redis to provide a live leaderboard for millions
                          users of mobile app

Streaming Data Dashboards 	Provide a landing spot for streaming sensor data
                          	on factory floor, real-time dashboards


		Memcached								vs. 								Redis
		----------																----------
		- Simple, no frills straight forward			 - you need encryption
		- Scale out/in as demand changes 					 - you need HIPPA compliance
		- Run multiple CPU cores / threads 				 - Support for clustering
		- You need to cache objects 							 - You need complex data types
																							 - You need HA / replication
																							 - Pub / Sub capability
																							 - Geospatial indexing
																							 - Backup / restore
     Barebones									 								Fancy Options



## Amazon Database Options
##########################

Database on EC2				- Ultimate control over database
              				- Prefereed DB no available under RDS

Amazon RDS    				- Need tradtional relational DB for OLTP
              				- Your data is well-formed and structured

Amazon DynamoDB    		- Name / value pair data or unpredictable data structure
              				- In-memory performance w/ persistence

Amazon Redshift    		- Massive amounts of data
              				- Primarily OLAP workloads

Amazon Neptune    		- Relationships between objects a major portion of data value

Amazon Elasticache    - Fast temporary storage for small amounts of data
              				- Highly volatile data


## Exam Tips
##########################

	- Read AWS Storage Options whitepaper, NOTE: anti-patterns

Know when to use various data stores:

	RDS 				Traditional relational data models
	    				Existing apps requiring RDBMS
	    				OLTP, ACID-compliant

	DynamoDB 		High I/O needs
							Scale dynamically

	S3 					BLOBs

	EC2 				Database not suppported under RDS
	    				Need complete control

	Redshift 		OLAP

Resources:
		AWS Whitepapers
		re:Invent Videos

Storage Options in the cloud
https://d1.awsstatic.com/whitepapers/Storage/AWS%20Storage%20Services%20Whitepaper-v9.pdf

Multi-Tenant SaaS Storage Strategies
https://d1.awsstatic.com/whitepapers/Multi_Tenant_SaaS_Storage_Strategies.pdf

Perfromance as Scale with Amazon Elasticache
https://d0.awsstatic.com/whitepapers/performance-at-scale-with-amazon-elasticache.pdf

Video: Deep Dive on Amazon S3 and Glacier Storage Management
https://www.youtube.com/watch?v=SUWqDOnXeDw

Video: Deep Dive on Amazon Relational Database Service
https://www.youtube.com/watch?v=TJxC-B9Q9tQ

Video: ElastiCache Deep Dive: Best Practies and Usage Patterns
https://www.youtube.com/watch?v=_YYBdsuUq2M

Video: Using Hybrid Storage with AWS Storage Gateway to Solve On-Premise Storage Problems
https://www.youtube.com/watch?v=9wgaV70FeaM


## Pro Tips - Storage
##########################

	- Archiving and Backup often great "pilot" to build AWS case
	- Make use of the S3 endpoints within your VPC
				- attach S3 endpoint to VPC
	- Learn how to properly secure your S3 bucket
	- Encrypt!!!
	- Consider Aurora for you production MySQL/Maria or PostgreSQL needs
	- Consider NoSQL if you don't need relational databases
	- Databases on EC2 cost less on the surface than RDS
			- remember costs of management (backups, pathing, OS-level hardening)
	- There can be a performance hit when RDS backups run if you only
	  have a single AZ instance.

## Lab Storage
https://github.com/ACloudGuru-Resources/Course_Certified_Solutions_Architect_Professional/tree/master/lab-storage

registry.opendata.aws

openaq
Resource type
    S3 Bucket
Amazon Resource Name (ARN)
    arn:aws:s3:::openaq-fetches

Athena works with JSON file

https://openaq-fetches.s3.amazonaws.com/index.html


1. Use AWS Glue
	- create crawler
	s3://openaq-fetches/realtime/2018-10-09


What city had the highest average ozone (O3) reading on October 9, 2018?




###################################################################################################
## Networking
###################################################################################################

Refresher:
	- Physical layout of AZs and Regions
	- VPC concept and how to create
	- Create private and public subnets
	- What a NAT is and what "Disable Source/Destination Check"   << WHAT IS THIS ??
									a NAT instance must be able to send and receive traffic
									when the source or destination is not itself. Therefore,
									you must disable source/destination checks on the NAT instance
	- Route table and routing terminology (default routes, local routes)
	- IPv4 Addressing and Subnet Mask Notation (/14, /24, etc)
	- Intermediate Networking Terminology: MAC address, port, gateway, router

## OSI Model:

Layer						Name							Example											Mnemonic
-----						-----							---------										-------------
 7							Application				Web Browser										Away
 6							Presentation			TLS/SSL, Compression 					Pizza
 5							Session						Setup, Negotiation, Teardown 	Sausage   ^
 4							Transport					TCP 													Throw     | Customer
 3							Network						IP, ARP 											Not      	| Responsibility
 ---------------------------------------------------------------------------------------
 2							Data Link					MAC														Do				| AWS
 1							Physical 					CAT5, fiber, 5GHZ							Please		v Responsibility


Multicast not allowed in AWS

Unicast: like a phone call
Multicast: Loudspeaker (MAC address level)

## TCP vs. UDP vs ICMP

Layer 4 Protocol		Characteristics							Plain Speak							Uses
----------------    ---------------							-----------             -----
 TCP 								Connection-based,						After everything I say	Web, Email, FTP
                    stateful, ack receipt				I want you to confirm

 UDP								Connectionless, 						I'm going to talk and		Streaming, DNS
 									  stateless, simple no			  its ok if you miss
 									  retransmission delays 			some words

 ICMP								Used by network devices, 		We routers can keep 		traceroute, ping
										to exchange info						in touch about network
																								health in our own language


## Ephemeral Ports
	- Short-lived transport protocol ports used in IP communications
	- Above the "well-known" IP ports (above 1024)
	- Dynamic Ports
	- Suggested range is 49152 to 65535
		- Linux kernels generally use 32568 to 61000
		- Windows platforms default from 1025
	- NACL and Security Group implications


## AWS Availability Zones
	- The Physical to Logical assignment of AZ's is done at Account Level
	 	i.e. Account 10's US-WEST-2A might not be same Physical data center as
		     Account 22's US-WEST-2A !!

		- Does this to balance load across data centers


## Network to VPC Connectivity
###############################
Amazon Global Network

AWS re:Invent 2016 Amazone Netowrk Overview by James Hamilton
https://www.youtube.com/watch?v=uj7Ting6Ckk

- AWS Managed VPN
- AWS Direct Connect
- AWS Direct Connect + VPN
- AWS VPN CloudHub
- Software VPN
- Transit VPC


## AWS Managed VPN
#####################
What: 	AWS managed IPsec VPN connection over your existing internet

When: 	Quick and usually simple way to establish a secure tunneled connection
      	to a VPC; Redundant link for Direct Connect or other VPC VPN

Pros: 	Supports static routes or BGP peering and routing

Cons: 	Dependent on your Internet connection



## AWS Direct Connect
#####################

What: 	Dedicated network connection over private lines straight into AWS backbone

When: 	Require a "big pipe" into AWS; lots of resources and services being
      	provided on AWS to you corporate users

Pros: 	More predictable network performance; potential bandwidth cost reduction;
				up to ** 10 Gbps provisioned connections; Supports BGP peering and routing

Cons: 	May require additional telecom and hosting provider relationships and/or
 				new network circuits

How: 		Work with your existing Data Network Provider; Create Virtual Interfaces
        (VIF) to connect to VPCs (private VIF) or other AWS service like S3
				or Glacier (public VIF)

## AWS Direct Connect Plus VPN
###############################

What: 	IPSec VPN connection over private lines

When: 	Want added security of encrypted tunnel over Direct Connect

Pros: 	More secure (in theory) than Direct Connect alone

Cons: 	More complexity introduced by VPN layer

How: 		Work with your existing Data Networking Provider




## AWS VPN CloudHub
###############################

What: 	Connect locations in a Hub and Spoke manner using AWS Virtual Private Gateway

When: 	Link remote offices for backup or primary WAN access to AWS resources
				and each other

Pros: 	Reuses existing Internet connection; Supports BGP routes to direct
				traffic (i.e. use MPLS first then CloudHub VPN as backup)

Cons: 	Dependent on Internet connection; No inherent redundancy

How: 		Assign multiple Customer Gateways to a Virtual Private Gateway,
				each with their own BGP ASN and unique IP ranges


## Software VPN
###############################

What: 	You provide your own VPN endpoint and software

When: 	You must manage both ends of the VPN connection for compliance
				reasons or you want to use a VPN option not supported by AWS

Pros: 	Ultimate flexibility and manageability

Cons: 	You must design for any needed redundancy across the whole chain.

How: 		Install VPN software via Marketplace appliance or on an EC2 instance


## Transit VPC
###############################

What: 	Common strategy for connecting geographically disperse VPCs and
				locations in order to create a global network transit center

When: 	Locations and VPC-deployed assets across multiple regions that need to
				communicate with one another

Pros: 	Ultimate flexibility and manageability but also AWS-managed VPN
				hub-and-spoke between VPCs

Cons: 	You must design for any needed redundancy across the whole chain.

How: 		Providers like Cisco, Juniper Networks and Riverbed have offerings
				which work with their equipment and AWS VPC.



###################################################################################################
## Fundamentals:  Subnets & CIDR
###################################################################################################

     		Network			Host 									Hosts per
Class		Range				Range			Networks		Network
  A          0 . 0.0.0
           127 . 255.255.255		 128			 16,777,216
  B        128.0 . 0.0
        191.255  . 255.255		 	16,384 		     65,536
  C      192.0.0 . 0
    223.255.255  . 255		 			2,097,152 		  256



Class 				Private Subnet Range 					Subnet Mask
  A							10.0.0.0										255.0.0.0
  B							172.16.0.0									255.255.0.0
  C							192.168.0.0									255.255.255.0


## CIDR:  Classless Inter-Domain Routing

ex.   10.0.1.0/24

divided into two subnets =

	10.0.1.0/25     (127 hosts)   10.0.1.1   - 127
	10.0.1.128/25   (126 hosts)   10.0.1.128 - 254


VPC:  			10.0.1.0/24
	subnet 1: 10.0.1.0/25
	subnet 2: 10.0.1.128/25



## VPC to VPC Connectivity
###############################

 - VPC Peering
 - Software VPN
 - Software to AWS Managed VPN
 - AWS Managed VPN
 - AWS Direct Connect
 - AWS PrivateLink



## VPC Peering
###################

What: 	AWS-provided network connectivity between two VPCs

When: 	Multiple VPCs need to communicate or access each others resources

Pros: 	Uses AWS backbone without touching the Internet

Cons: 	If A connect to B and B connected to C, A cannot talk to C via B.
        (transitive peering not supported)

How: 		VPC Peering request is made; Accepter accepts request (either within
 				Account or across Accounts)
NOTE: Connecting VPCs together

## AWS PrivateLink
###################

What: 	AWS-provided network connectivity between VPCs and/or AWS services
				using interface endpoints

When: 	Keep Private subnets truly private by using the AWS backbone to reach
				other services rather than the public Internet

Pros: 	Redundant: uses AWS backbone

Cons: 	As of October 2018, VPC endpoints can be accessed over inter-region VPC peering

How: 		Create Endpoint for needed AWS or Marketplace service in all needed subnets;
				access via the provided DNS hostname
NOTE: Connecting services together via VPC endpoints


## VPC Endpoints
###################

	- Two types of endpoints:  Interface and Gateway endpoint
										Interface								Gateway
										Endpoint								Endpoint
										----------							----------
What					Elastic Network Interface 		A gateway that is a target for a
						  with a Private IP							specific route

How							Uses DNS entries to					Uses prefix lists in the route table
								redirect traffic						to redirect traffic

What Products		API Gateway, Cloud Formation,			Amazon S3, DynamoDB
								CloudWatch, etc.

Securing				Security Groups 								VPC Endpoint Policies


## Internet Gateways
#####################
	- Internet Gateway
	- Egress-Only Internet Gateway
	- NAT Instance
	- NAT Gateway


## Internet Gateway
	- Horizontally scaled, redundant and highly available component that allows
	  communication between your VPC and the Internet
	- No availability risk or bandwidth constraints
	- If your subnet is associated with a route to the Internet, that it is a
		public subnet
	- Supports IPv4 and IPv6

	Purpose 1: Provide route table target for Internet-bound traffic
	Purpose 2: Perform NAT for instances with public IP addresses
		NOTE: DOES not perform NAT for instances with private IP's only


## Egress-Only Internet Gateway
	- Used for IPv6 addresses only
	- IPv6 addresses are globally unique and are public by default.
	- Provides outbound Internet access for IPv6 addressed instances
	- Prevents inbound access to those IPv6 instances
	- Stateful - forwards traffic from instance to internet and then sends back
	  the response
	- Must create a custom route for ::/0 to the Egress-Only Internet Gateway
	- Use Egress-Only Internet Gateway instead of NAT for IPv6


## NAT Instance
	- EC2 instance from a special AWS-provided AMI
	- Translate traffic from many private IP instance to a single public IP and back
	- Doesn't allow public Internet connections into private instances
	- Not supported for IPV6 (use Egress-Only Gateway)
	- NAT Instance must live on a public subnet with route to Internet Gateway
	- Private instances in private subnet must have route to the NAT instance,
	   usually the default route destination of 0.0.0.0/0


## NAT Gateway
	- Fully-managed NAT service that replaces need for NAT Instances on EC2
	- Must be created in a Public subnet
	- Uses and Elastic IP for public IP for the life of the Gateway
	- Private instances in private subnet must have route to the NAT instance,
	  usually the default route destination of 0.0.0.0/0
	- Created in specified AZ with redundance for that zone
	- For multi-AZ redundancy, create NAT Gateways in each AZ with routes for
	  private subnets to use the local Gateway
	- Up to ** 5Gbps bandwidth that can scale up to 45 Gbps
	- Can't use a NAT Gateway to access VPC peering, VPN or Direct Connect, include
		specific routes to those in your route table (remember most specific route
		  is selected first)


								NAT Gateway												NAT Instance
								------------ 											-------------
Availability		Highly available within AZ				On your own
Bandwidth				Up to ** 45 5Gbps									Depends on bandwidth of instance type
Maintenance			Managed by AWS										On your own
Performance			Optimized for NAT 								Amazon Linux AMI configured to perform NAT
Public IP				Elastic IP that    								Elastic IP that can be detached
                can not be detached
Security Groups	 Cannot be associated with				Can use Security Groups
								 NAT Gateway (?)
Bastion Server 	Not supported 										Can be used as a bastion server


## Routing
#####################

VPC Context
	- Route Tables
	- Border Gateway Protocol

Route 53 Context
	- Routing Policies

Elastic Load Balance Context
	- Request Routing


## Routing Tables
	- VPCs have an implicit router and main routing table
	- You can modify the main routing table or create new tables
	- Each route table contains a local route for the CIDR block
	- Most specific route for an address wins

		Destination								Target
		-----------								-------
		10.0.0.0/16								local
		192.168.0.0/24 						vpg-xxxxxxxxxxx     << VPN Gateway
		0.0.0.0./0 								nat-xxxxxxxxxxx     << NAT Gateway
*		pl-xxxxxxxxxxx     				vpce-xxxxxxxxxxx    << VPC Endpoint (PrivateLink)

* prefix list is a predefined mapping of all IP addresses that make up service endpoint


		Ex. Address							Target
		10.0.45.34							local
		64.56.34.1							nat-xxxxxxxxxxx
		192.168.0.7							vpg-xxxxxxxxxxx
		Resolved IP
		address of S3						vpce-xxxxxxxxxxx
		10.0.255.255						<null> Broadcast address on 10.0.0.0. Not supported by VPC


## Border Gateway Protocol
	- Popular routing protocol for the Internet
	- "Propogates" information about the network to allow for dynamic routing
	- Required for Direct Connect and optional for VPN
	- Alternative of not using BGP with AWS VPC is static routes
	- AWS supports BGP community tagging as a way to control traffic scope and
	  route performance
	- Requirted TCP port 179 + ephemeral ports
	- Autonomous System Number (ASN) = Unique endpoint identifier
	- Weighting is local to the router and higher weight is preferred path for
		outbound traffic


## Enhanced Networking
#######################
	- Generally used for High Performance Computing use-cases
	- Uses single root I/O virtualization (SR-IOV) to deliver higher performance
		than traditional virtualized network interfaces
	- Might have to install driver if other than Amazon Linux HVM AMI
	- Intel 82599 VF Interface
			- 10 Gbps
	- Elastic Network Adapter
			- 10 Gbps


## Placement Groups
				Clustered															Spread
				-------------													-------------
What 		Instances are placed into 						Instances spread across
				low-latency group within a 						underlying hardware
				single AZ

When 		Need low network latency and/or				Reduce risk of simultaneous failure
				high network throughput								if underlying hardware fails

Pros		Get the most out of 									Can span multiple AZ's
				Enhanced Networking instances

Cons		Finite capacity: recommend						** Max of 7 instances running
				launching all you might need					per group per AZ
				up front


## Route 53
############
	- Register domain names
	- Check the health of your domain resources
	- Route internet traffic for your domain

	Should know
	- What a DNS is
	- DNS record types: A, CNAME, MX, TXT
				A:  	 host address
				ALIAS: auto resolved alias
				CNAME: canonical name for an alias
				MX: 	 mail exchange
				TXT: 	 descriptive text
	- Route 53 Concepts (alias, hosted zone, etc)
	- Why called Route 53 (reference TCP/UDP port for DNS server requests: 53)

# Route 53 Routing Policies

Policy							Route 53 Action
--------						----------------
Simple							Here is destination for that name
Failover						Route to failover because health check on Primary is down
Geolocation					You're in Europe, route you to the closer resource
Geoproximity				You're closer to US-EAST-1, route there instead of US-WEST-1
Latency							Which resource has lower latency
Multivalue Answer		Return several IP addresses, like a load balancer
Weighted						Setup multiple records, and route according to % or weight assigned


NOTE: Bias on geo-proximity record (positive +99, negative -99)
		- positive bias increases geo-proximity circle
		- negative bias decreases geo-proximity circle

NOTE: Multivalue Answer:  multiple IP addresses point to same CNAME

NOTE: Weighted routing values can be from ** 0 - 255
				0 disables traffic to that endpoint (i.e. blue green deployment)

					% of Traffic = Weight for a specific record / Sum of all weights all records



## CloudFront
################

	- Distributed content delivery service for simple static asset caching up to
	  4k live and on-demand video streaming

	- Understand how to create CloudFront distribution and understand edge location

	- Integrated with Amazon Certificate Manager and supports SNI (Server Name Indication)

## SSL TLS SNI

	Want at least TLS v1.2

	SNI (Server Name Indication): Client asks for which host to connect to and server
	  	offers multiple certificates on same IP.  (Few old browsers don't support)

	Security Policy:
			- TLSv1
			- TLSv1_2016
			- TLSv1.1_2016
			- TLSv1.2_2018



## Elastic Load Balancer
###########################

	- Distributes inbound connections to backend endpoints
	- Three options:
				- Application Load Balancer (Layer 7)
				- Network Load Balancer (Layer 4)
				- Classic Load Balancer (Layer 4 or 7)
	- Used for public / private workloads

													Application LB			Network LB			Classic LB
													---------------			---------- 			------------
Protocols									HTTPS, HTTP						TCP 					TCP, SSL, HTTP, HTTPS
Path or host-based						YES								NO								NO
  Routing
SSL Off Loading								YES								NO								YES
SNI														YES								NO								NO
Sticky Sessions								YES								NO								YES
Static IP/ Elastic IP					NO								YES								NO
User Authentication						YES								NO								NO


## Application Load Balancer

	Routes login.acme.com/customer to different Target Group vs.
	       login.acme.com/vendor

## Network Load Balancer
	- Excel at speed

## Sticky Sessions
	- Identifies which client is assigned which server.


Use these addresses from NLB back to on-prem:
10.0.0.0/8
172.16.0.0/12
192.168.0.0/16
100.64.0.0/10
RFC 1918 / RFC 6598

NLB gets assigned Single IP Addr for each AZ

## Exam Tips
###########################
VPCs:
 - Know pros and cons of each On-prem AWS Connection mode
 - Know the functions of the different VPC components
 		- Customer GW
 		- Virtual Private GW
 - Know that Direct Connect is not inherently redundant
 		- Know how to architect a network that is (VPN, 2ndary direct connect )
 - Multicast and Broadcast aren't supported in VPCs
 - Know what is meant by stateless, stateful, connectionless and
   connection-based in terms of IP protocols
 - Know what ephemeral ports are and why they might be needed in a NACL or SG

Routing:
 - Understand BGP and how to use weighting to shift network traffic
 - Know how routes in a route table are prioritized (most specific wins)
 - What other routing protocols does AWS support (none, only BGP )

VPC Peering:
 - CIDR ranges cannot overlap.
 - After VPC owner accepts a peering request, routes must be added to
   respective route tables
 - Transitive peering is not supported, but mesh or hub and spoke are, with
   proper NACLs and routes
 - A Transit VPC is supported

Internet Gateways:
 - Difference between NAT Instance and NAT GW
 - Internet GWW is horizontally scaled, redundant with no bandwidth constraints
 - NATs do have bandwidth contraints but..
 - VPCs can have multiple NATs across AZs and subnets for scale -
   so long as routes are defined properly
 - Use Egress-Only Gateway for IPv6

Route 53:
 - Understand different types of routing policies and use cases.
 - Know the Weighted Routing Formula
 - Route 53 is a global service

CloudFront:
 - Understand what must happen to use a custom domain with CloudFront
 - Understand what SNI enables and the necessary alternative

Elastic Load Balancer:
 - Know the three different types of Load Balancers and  at which OSI Layer they work
 - Understand which major features each deliver ( protocol, SNI Sticky Sessions)
 - Know what sticky sessions are and when they come into play.

Connecting Many VPCs:
https://www.youtube.com/watch?v=KGKrVO9xlqI

Amazon VPC Network :
https://www.youtube.com/watch?v=8gc2DgBqo9U

Deep dive into the New Network Load Balancer :
https://www.youtube.com/watch?v=z0FBGIT1Ub4

## Pro Tips
###########################

 - Direct Connect may be a more complex and costlier option to setup, but it
   could save big on bandwidth costs
 - Explicitly deny as must traffic as you can with NACLs and SG
 		- Principle of Least Privilege
 - Think through your VPC layout (see 2017 re:Invent video "Networking May VPCs:
    Transit and Shared Architecture")
 -  You can use Route 53 for your domain even if AWS isn't your registrar.
 -  ELBs provide a useful layer of abstraction (as does Route 53 too)








###################################################################################################
## Security
###################################################################################################

## Concepts
###########################

Shared Responsibility Model
		- Customer:  Platform, App, OS, IAM, Client Data, Encryption, etc.
		- AWS: Compute, Storage, DB, Networking, Regions, AZ, Edge locations


Principle of Least Privilege
	- Give user only access they need, only when they need it.


Security Facet 			Description   							AWS Example
--------------      --------------- 						------------------
Identity						Who you are?								Root Account User, IAM User
																								Temp Security Credentials

Authentication			Prove that you are you			Multi-factor Authentication
																								Client-side SSL Certificate

Authorization				Are you allowed to do this 	IAM Policies

Trust 							Do other entities that I 		Cross-Account Access,
      							trust say they trust you?		SAML-based Federation,
      																					Web Identity Federation



## Identity Providers / Identity Brokers

							+-----------------------------------------------+
              |                                               |     +--------------------+
              |                                               |     | +----+   +-----+   |
              |            Identity Store (Directory)         |     | |    |   |     |   |
              |     ID          Secret        Privileges      |     | +----+   +-----+   |
              |    sue          xxx             111           |     |                    |
              |    joe          yyy             222           |     |  +-------------+   |
              |    root         zzz             234           |     |  +-------------+   |
              |                                               |     +--------------------+
              |                  |         ^                  |         Service Providers
 Identity     |                  |         |                  |
 Providers    |                  v         |                  |               ^
              |           +---------------------------+       |               |
 [facebook]   |           |                           |       |               | (key)
              | +------>  |                           |       |               |
 [google]     |Federation |                           | +---> |       +---------------+
              | <------+  |                           | (key) |       +---------------+
 [cognito]    |           |                           |       |
              |           |                           | <---+ |       +---------------+
              |           |                           |       |       +---------------+
              |           +---------------------------+       |
              |                  Identity Broker              |       +---------------+
              |                                               |       +---------------+
              +-----------------------------------------------+						 Identities
                     Identity Provider



## Authentication Flow

Service Provider                     User Agent                Identity Provider
----------------                     ----------                -----------------
   | <----- Give Me Access ----------   |                                    |
   |                                    |                                    |
	 | ---- Go ask Identity Provider ---> |                                    |
   |                                    |                                    |
   |                                    | --I Was sent by Service Provider-> |
   |                                    |                                    |
   |                                    | <---- Authentication Please -----  |
   |                                    |                                    |
   |                                    | --- Here is my authentication -->  |
   |                                    |                                    |
   | <--- Let this person in, they check out ------------------------------  |
   |                                    |                                    |
	 | ----------- Come on in ----------> |                                    |
   |                                    |                                    |



## SAML vs. OAuth vs. OpenID

SAML 2.0
	- can handle authorization and authentication
	- XML-based protocol
	- Can contain: user, group memebership an other info
	- Assertions in the XML for authentication, attributes or authorization
	- Best Suited for Single Sign-on for Enterprise users

OAuth
	- Allows sharing of protected assets without having to send login credentials
	- Handles authorization (can you do it) only, not authentication (who are you)
	- Issues token to the client
	- Application validates token with Authorization Server
	- Delegate access, allowing the client apps to access info on behalf of user
	- Best suited for API authorization between apps

OpenID Connect
	- Identity layer built on top of OAuth 2.0, adding authentication
	- Uses REST/JSON message flows
	- Supports web clients, mobile, clients, Javascript clients
	- Extensible
	- Best suited for Single Sign-on for consumer


## Compliance
	- AWS Artifact
	- ISO 9001, ISO 27001, ISO 27017,  ISO 27018, PCI DSS Level 1, SOC 1, SOC 2, SOC 3



## Multi-Account Management
###########################

	- Most large orgs will have multiple AWS Accounts
	- Segregation of duties, cost allocation, and increased agility
	- Need methods to properly manage and maintain them.

## When Should You Use Multiple Accounts?
	- Do you require administrative isolation between workloads ?
	- Do you require limited visibility and discoverability of workloads ?
	- Do you require isolation to minimize "blas radius" ?
	- Do you require strong isolation of recovery and/or auditing data ?


## AWS Tools for Account Management
	- AWS Organizations
			- hierarchy or orgs
	- Service Control Policies
			- policies on sub-accounts
	- Tagging
	- Resource Groups
	- Consolidated Billing


## Identity Account Structure
	- Manage all users in Identity Account
	- Create IAM Groups and assign users
	- Create Cross account roles
	- Assign roles to sub-account: business unit, env, geography

  +--------------+                   +-------------+
  |              |          -------> |  Operations |
  | [IAM Users]  |          |        |  Account    |
  |              |          |        | [IAM Role]  |
  |              |          |        +-------------+
  |              |          |
  |              |          |        +-------------+
  | [IAM Groups] |  ---------------> | Marketing   |
  |              |                   | Account     |
  |              |                   | [AIM Role]  |
  +--------------+                   +-------------+


## Logging Account Structure
	- Centralized logging repo
	- Can be secured so as to be immutable
			- generated from sub-accounts but can't change
	- Can use Service Control Policies to prevent
    sub-accounts from changing logging settings


  +-----------------+                   +-------------+
  | Logging Account |          -------- |  Operations |
  | Lambda          |          |        |  Account    |
  |  ^    QuickSight|          |        | CloutdTrail |
  |  |      |       |          |        +-------------+
  |  |      |       |          |
  |  |      v       |          |        +-------------+
  | [Enterprise]    | <---------------- | Marketing   |
  | [Logging   ]    |                   | Account     |
  | [Buckets   ]    |                   | AWS Config  |
  +-----------------+                   +-------------+

## Publishing Account Structure
	- Common repo for AMI's, Containers Code
	- Permits sub-accounts to use pre-approved standardized services or assets

  +---------------------+                   +-------------------+
  | Publishing Account  |                   |  Operations Acct  |
  | [Service Catalog]   |                   |                   |
  |                     |          |------> |   EC2 Instances   |
  |     [EC2 AMIs]      | ----------        +-------------------+
  |                     |
  | [Elastic Container] |                   +---------------------+
  | [Registry         ] | ------------      | Marketing Acct      |
  |                     |            |      |                     |
  |                     |            -----> | [Docker Container]  |
  |   [CodeCommit]      | -------|          |                     |
  |                     |        ---------> |  Developers         |
  +---------------------+                   +---------------------+



## Information Security Account Structure
  - Hybrid of consolidated security and logging
  - Allows one point of control and audit
  - Logs cannot be tampered with by sub-account users


## Central IT Account Structure
  - IT can manage IAM Users and groups while assigning
	  to sub-account roles
  - IT can provide shared services and standardized assets
	  (AMI's, databases, EBS, etc.) that adhere to corportate policy


  +---------------------+                   +-------------------+
  | Central IT Account  |                   |  Operations Acct  |
  |                     |                   |  [Biz unit data]  |
  |                     |            |----> |   Admin Role      |
  |   [IAM Users]       | -----|-----        +-------------------+
  |                     |      |
  |                     |      |            +---------------------+
  |  [Service Catalog]  |      |------      | Marketing Acct      |
  |                     |            |      |                     |
  |                     |            -----> | [IT Approved EC2 ]  |
  |   [EC2 AMIs]        | -------|          |                     |
  |                     |        ---------> |  Developer Role     |
  +---------------------+                   +---------------------+



## Organization Units (Multi-Account)
  - Consolidated billing allows for economy of scale
	  by grouping into single invoice
  - Consolidated security: utilize roles and federation Active Directory
  - Service Control Policies: cascade down a tree
			i.e. apply Service Control Policy (read-only) to Medical Equipment it
			     gets cascaded to Medical Equipment -> Regulated and Unregulated
  - NOTE: use Security(?) Control Policy to blacklist AWS services from
	        being used in sub-accounts


                                     [Root Account]
              -----------------------------|--------------------------
              |             |              |                         |
 [Consolidated Billing]     |    [Consolidated Security] 		 [Holding Company]
                            |
                            |
        |-------------------|----------------------|----------------------|
        |                   |                      |                      |
  [Consumer Products]      [Heavy Machinery] 	  [Automotive]			[Medical Equipment]
      |                                            |                  |
      |--[Marketing]                               |--[Americas]      |--[Regulated]
      |                                            |                  |
      |--[Manufacturing]                           |--[AsiaPacific]   |--[Unregulated]
      |                                            |
      |--[Finance ]                                |--[Africa]


## Security Groups
	- Virtual firewalls for individual assets (EC2, RDS, AWS Workspaces)
	- Controls inbound / outbound traffic for: TCP, UDP, ICMP or custom protocols
	- Port or port ranges
	- Inbound  rules set by Source IP, Subnet, other Security Group
	- Outbound rules set by Source IP, Subnet, other Security Group
	- Remember ephemeral ports for Outbound if you need them.


## Network Access Control Lists (NACLs)
	- Additional layer of security for VPC that acts as a firewall
	- Apply to entire subnets rather than individual assets
	- Default NACL allows all inbound and outbound traffic
	- NACLs are STATELESS:
			- outbound traffic obeys outbound rules
			- no connection maintained  (Security Groups are STATEFUL)
	- Can duplicate or further restrict access along with Security Groups
	- Remember ephemeral ports for Outbound if you need them

## Why use SGs and NACLs
	- NACLs provide a backup method of security if you accidentally change
	  you SG to be too permissive
	- NACLs cover entire subnet so users can create new instances and are
	  still protected if they assign the incorrect SG
	- Part of a multi-layer Least Privilege concept to explicitly allow and deny



## AWS Directory Services
###########################

## Types of Directory Services Offered

AWS Cloud Directory:  Cloud-native directory to share and control access to
                      hierarchical data between applications
            Best For: Cloud applications that need hierarchical data w/
						          complex relationshipos

Amazon Cognito :  Sign-up and sign-in functionality that scales to millions
                  of users and federated to public social media services
            Best For: Consumer apps or SaaS

AWS Directory Service :  AWS-manged full Microsoft Active Directory
for MS AD                (std or enterprise) running on Windows Server 2012 R2
            Best For: Enterprises that want hosted MS AD or you need
						          LDAP for Linux apps

AD Connector   :  Allows on-premises users to log into AWS Services
                  with their existing AD credentials. Also allows
									EC2 instances to join AD domain.
            Best For: Single sign-on for on-prem employees and for adding
						          EC2 instances to the domain.

Simple AD       :  Low scale, low cost AD implementation based on SAMBA
            Best For: Simple user directory, or you need LDAP compatibility


## AD Connector vs. Simple AD
	AD Connector
			- Must have existing AD
			- Existing AD users can access AWS assets via IAM roles
			- Supports MFA via existing RADIUS-bases MFA infrastructure

	Simple AD Connector
			- Stand-alone AD based on Samba
			- Supports user accounts, groups, group policies and domains
			- Kerberos-based SSO
			- MFA not supported
			- NO Trust Relationships


## Credential and Access Management
####################################

 - Know what IAM is and components
 - Users, Groups, Roles, Policies
 - Resource-based Policies vs. Identity-Based Policies
 - Know how to read and write policies in JSON
 - Services -> Actions -> Resources

## AWS Security Token Service
	- Temporarily grant credential access to applications or users
	- Can source credentials from: IAM, Active Directory, Facebook, Google

                                        +----------+
                               -------> |  Active  |
                               |        | Directory|
                               |        +----------+
                               |
                               |        +-----------+
                +----------+   -------> |  Facebook |
+----------+    | AWS      |   |        +-----------+
|  AWS IAM | -> | Secruity |-> |
+----------+    | Token    |   |        +-----------+
                | Service  |   -------> | Google    |
                +----------+            +-----------+

## Amazon Cognito used for Mobile Applications



+----------+          +----------+
|  Cognito | -------> |  Mobile  |
+----------+          |  Cognito |
                      |  SDK     |
                      +-----------+


## Security Token Service Flow
							+-----------------------------------------------+
              |                                               |     +--------------------+
              |                                               |     | +----+   +-----+   |
              |            Identity Store (Directory)         |     | |    |   |     |   |
              |     ID          Secret        Privileges      |     | +----+   +-----+   |
              |    sue          xxx             111           |     |                    |
              |    joe          yyy             222           |     +--------------------+
              |    root         zzz             234           |     AWS Service Providers
              |                                               |               ^
              |                  |     ^                      |               |
 Identity     |                  |     |                      |               |
 Providers    |                  v     |     +----->[STS]     |               |
              |           +----------------------+    |       |               |
 [facebook]   |           |                      |    |       |               | (token)
              | +------>  |                      |    |       |               |
 [google]     |Federation |                      |    |       |               |
              | <------+  |                      |    |(token)|       +---------------+
 [cognito]    |  (token)  |                      |    +-------------> |               |               ||
              |           |                      |            |       |  Applications |
              |           |                      | <----------|       |               |
              |           +----------------------+            |       +---------------+
              |                  Identity Broker              |
              |                                               |
              +-----------------------------------------------+
                     Identity Provider



## Web Identity Federation Playground
	- Authenticate with Identity Provider
				- Amazon, Google, Facebook
				ex. Sign in into Google, get token from STS
				    using AssumeRoleWithWebIdentity

## Token Vending Machine Concept
	- Common way to issue temp credentials for mobile app development
	  - Anonymous TVM: used as a way to provide access to AWS Services only,
		                 does not store user identity
	  - Identity TVM : used for registration and login and authorizations
  - AWS now recommends that mobile developers use Cognito and related SDK


## AWS Secrets Manager
	- Store passwords, encryption keys, API keys, SSH keys, PGP keys, etc.
	- Alternative to store passwords or keys in a "vault" (software / physical)
	- Can access secrets via API with fine-grained access control provided by IAM
	- Automatically rotate RDS database credentials for MySQL, PostgreSQL and Aurora
	- Better than hard-coding credentials in scripts / applications
















.
