
###################################################################################################
##
##  AWS Certified Solutions Architect Professional
##  https://learn.acloud.guru/course/aws-certified-solutions-architect-professional-2019/dashboard
##
###################################################################################################


## Intro

Followup by taking AWS Certification Preparation Guide

###################################################################################################
## Data Stores
###################################################################################################


## Concepts
#############


## Persistent Datastore
Data is durable after reboots, restarts, powercycles
	- Glacier
	- RDS

## Transient Datastore
Data is temporarily stored and passed along to another process / persistent store
	- SQS
	- SNS

## Ephemeral Datastore
Data is lost when stopped
	- EC2
	- Memcached

## IOPS vs Throughput

Input/Output Operations per Second (IOPS)
  Measure how fast we can read and write to a device

Throughput
  How much data can be moved at a time



## Consistency Models: ACID & BASE
Atomic		All or nothing
Consistent	Must be valid
Isolated	Transactions can't interfere
Durable		Completed transaction stays around

Basic Availability	values availability even if state
Soft-state		might not be instantly consistent across stores
Eventually Consistent	will achieve consistency at some point


## S3
#############

S3 is an Object Store
 - used in other AWS services

  ** Maximum object size is 5TB
  ** Largest object in a single PUT is 5GB
  NOTE: Use multi-part uploads if larger than 100MB

s3://bucket/finance/april/invoice_1234.pdf = a Key, NOT A FILEPATH

## S3 Consistency

Documentation																Real world
--------------------------- 								--------------------------------
S3 provides read-after-write 								Write it and read it immediately
consistency for PUTS of new objects

HEAD or GET requests of the key before      Respond with "never seen it" until
an object exists will result in eventual    I completely write new object and
consistency																	fully replicate it.

S3 offers eventual consistency for 					Update or delete completely locally,
overwrite PUTS and DELETES									then replicate elsewhere. Until then
																						serve up the current file

Updates to a single key are atomic					Only one person can update this object,
 																						if two requests, process in order of
																						timestamp.  Updates seen as soon as
																						replication is done elsewhere.



## S3 Security

	- Resource-based (Object ACL, Bucket policy)
	- User-based  (IAM Policies)
	- Optional Multi-factor Authentication before delete

	----------------------------
  |  Is your user account    |---------  NO
  |  allowed to access me?   |
	----------------------------
            |
            | yes
	----------------------------
  |  Does the bucket policy  |---------  NO
  |  allow access to you     |
	----------------------------
            |
            | yes
	----------------------------
  |  Does the object ACL      |---------  NO
  |  allow you access to it   |
	----------------------------
            |
            | yes
		-------------------
    |    Access it    |
		-------------------


## S3 Versioning
	- New version with each write
	- Enables "roll-back" and "un-delete" capabilities
	- Old versions count as billable size until they are permanently deleted
	- Integrated w/ Lifecycle Management

## S3 Data Protection
	- Optionally require Multi-factor Authentication:
		- Safeguard against accidental deletion of an object
		- Change the versioning state of your bucket

	- Cross region replication
		- Security
		- Compliance
		- Latency

## S3 Lifecycle Management
		- Optimize storage costs
		- Adhere to data retention policies
		- keep S3 volumes well-maintained

## S3 Analytics

Data Lake Concepts									Athena, Redshift Spectrum, QuickSight
IoT Streaming Data Repo							Kinesis Firehose
Machine Learning & AI storage				Rekognition, Lex, MXNet
Storage Class Analysis 							S3 Management Analytics


## S3 Encryption at Rest

	Encryption Optional								Meaning
 ---------------------							--------------------
 SS3-S3															Use S3's existing encryption key for AES-256
 SS3-C															Upload your own AES-256 encryption key which
 																		S3 will use when it writes the objects.
 SS3-KMS														Use a key generated and managed by AWS Key
 																		Management Service
 Client-Side 												Encrypt objects using your own local encryption
                                    process before uploading to S3 (PGP, GPG, etc.)


## S3 Tricks

Transfer Accelerations						Speed up data uploads using CloudFront in reverse

Requestor Pays 										The requestor rather than the bucket owner
																	pays for requests and data transfer.

Tags 															Assign tags to objects for use in costing,
                                  billing, security, etc.

Events 														Trigger notifications to SNS, SQS or Lambda
																	when certain events happen in your bucket

Static Web Hosting 								Simple and massively scalable static website hosting

BitTorrent 												Use the BitTorrent protocol to retrieve any
																	publicly available object by automatically
																	generating a .torrent file.


## Glacier
#############

	- Cheap, slow to respond, seldom accessed
	- "Cold Storage"
	- Used by AWS Storage Gateway Virtual Tape Library
	- Integrated with AWS s3 via Lifecycle Management
	- Faster retrieval speed options if you pay more



                               +---------+  - File, zip, tar, etc
          +-------------+      | Archive |  - Max size 40TB
          |             |      +---------+  - Immutable
          |             | <---------+
[IAM]     |   Glacier   |
  access  |   Vault     |       +--------+
  +-----> |             |       |        |  - Different than vault access policy
          +-------------+       | Glacier|  - Enforce rules like no deletes or MFA
                  ^             | Vault  |  - Immutable
                  |             | Lock   |
                  |             +--------+
                  +---------------+
                      Policy


  Glacier Vault like S3 bucket
  Glacier Archive like an S3 object
	Policy: rules for that Glacier Vault (no delete or use MFA)
	Access done via IAM


	Create a Glacier Vault Lock then Initiate a vault lock
				- 24 hours to confirm vault lock
				- After 24 hours and is not confirmed: vault lock aborted
				- Complete vault lock within 24 hours: applies vault lock permanently



## Elastic Block Storage
##########################

	- "virtual hard drives"
	- Can only be used with EC2
	- Tied to a single AZ
	- Variety of Optimized choices for IOPS, throughtput and cost
	- Snapshots!!

	Instance Store vs. EBS:
			- Instance Store is temporary, only available when EC2 is running
			- ideal for caches, buffers, work areas
			- data goes away when EC2 is stopped or terminated
			- locked to that EC2
			- EBS not locked to EC2
			- EBS can create snapshot
			- Instance store is "attached"
			- EBS over network

EBS Snapshots
	- cost-effective and easy backup
	- share data sets with other users or accounts
					- share the snapshot and user can create a volume from it
	- Migrate a system to a new AZ or Region
			REMEMBER: EBS tied to a single AZ, snapshots allow you to migrate
	- convert unencrypted volume to an encrypted volume
					- create EBS from volume and check encrypt check box



	First snapshot stores the entire block store
	Subsequent snapshots store just the delta (but also contain the base)
	If you delete 1st snapshot and

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     |   | 1 | O |   |   |	 	== Snapshot 1
     |---|---|---|---|---|
     |   | 0 | 1 |   |   |
     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|

add two pieces of in and Snapshot 2 looks like this

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 1 |   |   |   |   |	 	== Snapshot 2
     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 0 |   |   |   |   |
     |---|---|---|---|---|

restoring from snapshot 2 will give you

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 1 | 1 | 0 |   |   |	 	== Restored Snapshot 2
     |---|---|---|---|---|
     |   | 0 | 1 |   |   |
     |---|---|---|---|---|
     | 0 |   |   |   |   |
     |---|---|---|---|---|

add 1 piece and delete 1 piece of data Snapshot 3 looks like this

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     |   |   |   |   |   |	 	== Snapshot 3
     |---|---|---|---|---|
     |   |   |   | 1 |   |
     |---|---|---|---|---|
     | X |   |   |   |   |
     |---|---|---|---|---|

restoring from snapshot 3 will give you

     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|
     | 1 | 1 | 0 |   |   |	 	== Restored Snapshot 3
     |---|---|---|---|---|
     |   | 0 | 1 | 1 |   |
     |---|---|---|---|---|
     |   |   |   |   |   |
     |---|---|---|---|---|

REMEMBER:
	- FIRST snapshot gets charged for the full EBS size
	- All other snapshots after 1st get charged for JUST THE DELTA of storage
	- If delete intermediate snapshots you can restore a later snapshot
	- If delete FIRST snapshot, can restore later snapshots

THINK Snapshots as collection of pointers to data.
		- Pointers pulled forward to next most recent snap


## Elastic File Service
##########################

	- implementation of NFS file share
	- elastic storage capacity, and pay for only what you use (unlike EBS)
	- EFS 3x expensive as EBS,  20x expensive as S3
	- Multi-AZ metadata and data storage
	- Configure mount-points in one or many AZs
			- EC2 can mount local to their AZ
	- Can be mounted from on-premises systems ONLY if using Direct Connect
	- Alternatively, use EFS File Sync agent
				- load on premise and syncronize to EFS

	- EFS supports MOST features of NFS V4 BUT NOT ALL


+---------------------------------------------------+
| AWS                                               |
| +--------------------------------+                |
| |                      US-East-1 |                |
| | +-----+                        |                |
| | | web +-----------+            |                |
| | +-----+           |            |                |
| |                   vMount Point]|    +------+    |
| | +-----+            ^      +    |    |      |    |
| | | web +------------+      +-------->+ EFS  |    |
| | +-----+                        |    |      |    |
| |                                |    |      |    |
| +--------------------------------+    +---^--+    |
|                                           |       |
| +--------------------------------+        |       |
| |                      US-East-2 |        |       |
| | +-----+                        |        |       |
| | | web ++                       |        |       |
| | +----------------v[Mount Point]|        |       |
| |        +--------->      +---------------+       |
| | +------+                       |                |
| | | web ++                       |                |
| | +-----+                        |                |
| +--------------------------------+                |
+---------------------------------------------------+




## Amazon Storage Gateway
##########################

 - Virtual macine that you run on-premises with VMWare or HyperV
 		- Can also run on EC2 instances
 - Provides local storage resources backed by AWS S3 and Glacier
 - Often used in DR preparedness to sync to AWS
 - Useful in cloud migrations


New Name 		  	Old Name					Interface						Function
-----------   	---------------   ---------------     --------------
File Gateway		None 							NFS, SMB					Allow on-prem or EC2 instances
																									  to store objects in S3 via
																										NFS or SMB mount point

Volume Gateway	Gateway-stored 		iSCSI						Async replication of on prem data to s3
Stored Mode			volumes

Volume Gateway	Gateway-cache			iSCSI						Primary Data stored in S3 with
Cached Mode			volumes														frequently access data cached locally on-prem

Tape Gateway	Gateway-Virtual			iSCSI						Virtual media changer and tape library
         			Tape Library												for use with existing backup software


## Amazon WorkDocs
##########################
		(like dropbox)
	- Secure, fully managed file collaboration service
	- Can integrate with AD for SSO
	- HIPPA, PCI DSS and ISO compliance requirements
	- Available SDK for creating complementary apps


## Database on EC2
##########################
	- Run any database with full control  / flexibility
	- Must manage everything like backups, redundancy, patching, scale
	- Good option if you require a db not yet supported by RDS (i.e. DB2, SAP HANA)



## Amazon RDS
##########################

	- Managed database option for MySQL, Maria, PostgreSQL, SQL Server,
		Oracle and MySQL-compatible Aurora
	- Best for structured, relational data store needs
	- drop-in replacement for existing on-prem instances
	- Automated backups and patching in customer-defined maintenance windows
	- Push-button scaling, replication and redundancy

## RDS Anti-Patterns

	If you need ...										Don't use RDS, use this instead
	-----------------									-----------------------
	Lots of BLOB												S3
	Automated scalability 							DynamoDB
	Name / Value Data Structure 				DynamoDB
	Data not well stuctured 						DynamoDB
	Other DB (DB2, etc.)								EC2
	Complete control over db 						EC2


Multi-AZ RDS
	- Read-Replicas service regional users

NOTE for MySQL: non-transactional storage engines like MyISAM don't support
                replication; you muse use InnoDB (or XtraDB on Maria)

MariaDB is an open-source fork of MySQL.

	NOTE:  Sync replication to Standby
	       Aync replication to Read replica
---------------------------------------------------
| us-west-2																				|
|  ------------  	sync				------------				|
|  | Maria DB |		replication	| Maria DB |				|
|  | Master   |  	-------->		| Standby  |				|
|  ------------  							------------				|
|   us-west-2a   							us-west-2a					|
|				| 																				|
|				| 																			  |
--------|------------------------------------------
				|
				--------------------------
			                           |
---------------------------------|------
| eu-central-1									 |		 |
|  ------------  	async				   |     |
|  | Maria DB |		replication	   |     |
|  | Read     | <-----------------	   |
|  | Replica  |  	                     |
|  ------------  						           |
|   eu-central-1a   							     |
|																			 |
----------------------------------------

	- 1 AZ Fails
		- Stand-by in another AZ assumes role of master
		- Read replicas keep on working


	- if entire region fails
		- Read Replica promoted to Stand-Alone (Single-AZ)
		- Single-AZ reconfigured to Mult-AZ




## Amazon DynamoDB
##########################

	- Managed, multi-AZ NoSQL data store with Cross-Region Replication option
	- Defaults to eventual consistency reads but can request strongly consistent
	  read via SDK parameter
	- Priced on throughput, rather than compute
	- Provision read and write capacity in anticipation of need.
	- Autoscale capacity adjusts per configured min/max levels.
	- On-Demand Capacity for flexible capacity at a small premium cost.
	- Achieve ACID compliance with DynamoDB Transactions


	Relational vs. NoSQL

	relational : structured
	NoSQL : name / value pairs


	Partition Key ==>> Primary Key (Internal Hash)
	MUST BE UNIQUE
  Can access via key

	Composite Primary Key:  partition key + sort key i.e. OrderNum + timestamp
	Can have multiple instances of Partition Key but sort key MUST BE DIFFERENT

## Secondary Indexes

Index Type					Description									How to distinguish
-----------------   --------------------				------------------------
Global Secondary     Partition and sortkey can		I'm not restricted to partitioning
Index								 be different from those     of partition key.  I'm GLOBAL
										 on table

Local Secondary      Same partition as the table 	I have to stay local and respect
Index								 but different sort key 			table partition key but I can
																									choose sort key.

- ** Max 5 local and 5 global secondary indexes
- ** Max 20 attributes across all indexes
- Indexes take up storage space




## When to use Secondary Indexes

Index Type					Description									    Example
-----------------   --------------------				    ------------------------
Global Secondary     When you want a fast query			Query Sales Orders by Customer #
Index								 of attributes outside the      rather Sales Order $
										 primary key - without having
										 to do a table scan

Local Secondary      When you already know the 			I have Sales ORder #
Index								 partition key and want to      but I want to retrieve records
										 quicky query on another        with a certain Material #
										 attribute


## Attribute Projections
	- when creating an index, need to select which attributes are projected onto
	  that index
	- secondary index like a view

	Projection:
		- customerNum (key)
		  - customerName
		  - customerAddr1
		  - salesOrderNum
		  - timestamp


## Secondary index use cases

If you need to 						Consider				  		Cost						Benefit
-------------- 						--------				  		-----						---------
access just a few					Projecting just       Minimal					Lowest possible latency
attributes the fastest    those few attr												access for non-key items
way possible              in a global 2nd idx


frequently access some 		Projecting those      Moderate;				Lowest possible latency
non-key attributes        attr in a global			offset table		access for non-key items
													secondary index				scans


frequently access most 		Projecting those      Up to Double		Maximum flexibility
non-key attributes        attr or even entire
													table in global
													secondary index

rarely query but write 		Projecting keys only   Minimal 				Very fast write or
or update frequently 			for the global 												updates for non-partition
													secondary index 											key items.


## Amazon Redshift
##########################

	- Fully managed, clustered peta-byte scale data warehouse

	- Extremely cost-effective as compared to some other on-premise
	  data warehouse platforms

	- PostgreSQL compatible with JDBC and ODBC drivers available;
	  compatible with most BI tools out of the box

	- Features parallel processing an columnar data stores which are
	  optimized for complex queries.

Redshift Spectrum:  option to query directly from data files on S3



## Data Lake
	- Large repository of data
	- Place tech on top to make use i.e.  ML / Analytics etc.
			- Query raw data without extensive pre-processing
			- Lessen time from data collection to data value
			- Identify correlations between disparate data sets



## Amazon Neptune
##########################
	- Fully managed graph database
	- Supports open graph APIs for both Gremlin and SPARQL

https://aws.amazon.com/neptune




## Amazon Elasticache
##########################

	- Fully managed implementations of two popular in-memory data stores:
			- Redis
			- Memcached
	- Push-button scalability for memory, writes and reads
	- In Memory key/value store - not "traditionally persistent"
	- Billed by node size and hourse of use

   Use												Benefit
   ----												----------
Web Session Store					store web session info in Redis so session info not lost
													if web server goes down

Database Caching 					Use Memcached in front of AWS RDS to cache popular queries
                          to offload work from RDS and return results faster to users

Leaderboards 							Use Redis to provide a live leaderboard for millions
                          users of mobile app

Streaming Data Dashboards 	Provide a landing spot for streaming sensor data
                          	on factory floor, real-time dashboards


		Memcached								vs. 								Redis
		----------																----------
		- Simple, no frills straight forward			 - you need encryption
		- Scale out/in as demand changes 					 - you need HIPPA compliance
		- Run multiple CPU cores / threads 				 - Support for clustering
		- You need to cache objects 							 - You need complex data types
																							 - You need HA / replication
																							 - Pub / Sub capability
																							 - Geospatial indexing
																							 - Backup / restore
     Barebones									 								Fancy Options



## Amazon Database Options
##########################

Database on EC2				- Ultimate control over database
              				- Prefereed DB no available under RDS

Amazon RDS    				- Need tradtional relational DB for OLTP
              				- Your data is well-formed and structured

Amazon DynamoDB    		- Name / value pair data or unpredictable data structure
              				- In-memory performance w/ persistence

Amazon Redshift    		- Massive amounts of data
              				- Primarily OLAP workloads

Amazon Neptune    		- Relationships between objects a major portion of data value

Amazon Elasticache    - Fast temporary storage for small amounts of data
              				- Highly volatile data







.
